<?php
/**
 * @package php-font-lib
 * @link    https://github.com/PhenX/php-font-lib
 * @author  Fabien MÃ©nager <fabien.menager@gmail.com>
 * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License
 */

namespace FontLib\Table\Type;
use FontLib\Table\Table;

/**
 * `cmap` font table.
 *
 * @package php-font-lib
 */
class cmap extends Table {
  private static $header_format = array(
    "version"         => self::uint16,
    "numberSubtables" => self::uint16,
  );

  private static $subtable_header_format = array(
    "platformID"         => self::uint16,
    "platformSpecificID" => self::uint16,
    "offset"             => self::uint32,
  );

  private static $subtable_v4_format = array(
    "length"        => self::uint16,
    "language"      => self::uint16,
    "segCountX2"    => self::uint16,
    "searchRange"   => self::uint16,
    "entrySelector" => self::uint16,
    "rangeShift"    => self::uint16,
  );

  private static $subtable_v12_format = array(
    "length"        => self::uint32,
    "language"      => self::uint32,
    "ngroups"    => self::uint32
  );

  protected function _parse() {
    $font = $this->getFont();

    $cmap_offset = $font->pos();

    $data = $font->unpack(self::$header_format);

    $subtables = array();
    for ($i = 0; $i < $data["numberSubtables"]; $i++) {
      $subtables[] = $font->unpack(self::$subtable_header_format);
    }

    $data["subtables"] = $subtables;

    foreach ($data["subtables"] as $i => &$subtable) {
      $font->seek($cmap_offset + $subtable["offset"]);

      $subtable["format"] = $font->readUInt16();

      // @todo Only CMAP version 4 and 12
      if (($subtable["format"] != 4) && ($subtable["format"] != 12)) {
        unset($data["subtables"][$i]);
        $data["numberSubtables"]--;
        continue;
      }

      if ($subtable["format"] == 12) {

        $font->readUInt16();

        $subtable += $font->unpack(self::$subtable_v12_format);

        $glyphIndexArray = array();
        $endCodes = array();
        $startCodes = array();

        for ($p = 0; $p < $subtable['ngroups']; $p++) {

          $startCode = $startCodes[] = $font->readUInt32();
          $endCode = $endCodes[] = $font->readUInt32();
          $startGlyphCode = $font->readUInt32();

          for ($c = $startCode; $c <= $endCode; $c++) {
            $glyphIndexArray[$c] = $startGlyphCode;
            $startGlyphCode++;
          }
        }

        $subtable += array(
          "startCode" => $startCodes,
          "endCode" => $endCodes,
          "glyphIndexArray" => $glyphIndexArray,
        );

      }
      else if ($subtable["format"] == 4) {

        $subtable += $font->unpack(self::$subtable_v4_format);

        $segCount             = $subtable["segCountX2"] / 2;
        $subtable["segCount"] = $segCount;

        $endCode = $font->readUInt16Many($segCount);

        $font->readUInt16(); // reservedPad

        $startCode = $font->readUInt16Many($segCount);
        $idDelta   = $font->readInt16Many($segCount);

        $ro_start      = $font->pos();
        $idRangeOffset = $font->readUInt16Many($segCount);

        $glyphIndexArray = array();
        for ($i = 0; $i < $segCount; $i++) {
          $c1 = $startCode[$i];
          $c2 = $endCode[$i];
          $d  = $idDelta[$i];
          $ro = $idRangeOffset[$i];

          if ($ro > 0) {
            $font->seek($subtable["offset"] + 2 * $i + $ro);
          }

          for ($c = $c1; $c <= $c2; $c++) {
            if ($ro == 0) {
              $gid = ($c + $d) & 0xFFFF;
            }
            else {
              $offset = ($c - $c1) * 2 + $ro;
              $offset = $ro_start + 2 * $i + $offset;

              $font->seek($offset);
              $gid = $font->readUInt16();

              if ($gid != 0) {
                $gid = ($gid + $d) & 0xFFFF;
              }
            }

            if ($gid > 0) {
              $glyphIndexArray[$c] = $gid;
            }
          }
        }

        $subtable += array(
          "endCode"         => $endCode,
          "startCode"       => $startCode,
          "idDelta"         => $idDelta,
          "idRangeOffset"   => $idRangeOffset,
          "glyphIndexArray" => $glyphIndexArray,
        );
      }
    }

    $this->data = $data;
  }

  function _encode() {
    $font = $this->getFont();

    $subset          = $font->getSubset();
    $glyphIndexArray = $font->getUnicodeCharMap();

    $newGlyphIndexArray = array();
    foreach ($glyphIndexArray as $code => $gid) {
      $new_gid = array_