∏—õ', '–õ–∞–∑–∏—á–∏—õ', '–õ–∞–∑—É–∫–∏—õ', '–õ–∞—ò—à–∏—õ', '–õ–∞–∫–µ—Ç–∏—õ', '–õ–∞–∫–∏—õ', '–õ–∞–ª–∏—õ', '–õ–∞–º–±–∏—õ', '–õ–∞–ø—á–∏—õ', '–õ–∞—Å—Ç–∏—õ', '–õ–∞—Ç–∏–Ω—á–∏—õ', '–õ–µ–±—É—Ä–∏—õ', '–õ–µ–∂–∞–∏—õ', '–õ–µ–∂–∞—ò–∏—õ', '–õ–µ–∫–∞–Ω–∏—õ', '–õ–µ–∫–∏—õ', '–õ–µ–º–∞–∏—õ', '–õ–µ–º–∞—ò–∏—õ', '–õ–µ–ø–æ—Å–∞–≤–∏—õ', '–õ–µ—Å–µ–Ω–¥—Ä–∏—õ', '–õ–µ—á–∏—õ', '–õ–µ—à—Ç–∞—Ä–∏—õ', '–õ–∏—ò–µ—Å–∫–∏—õ', '–õ–∏–∫–æ–¥—Ä–∏—õ', '–õ–∏–∫—É—à–∏—õ', '–õ–∏–ª–∏—õ', '–õ–∏–ø–æ–≤—á–∏—õ', '–õ–∏—Å–∏—á–∏—õ', '–õ–∏—à–∞–Ω—á–∏—õ', '–õ–æ–≤—Ä–∏—õ', '–õ–æ–∑–∞–Ω–∏—õ', '–õ–æ—ò–∞–Ω–∏—á–∏—õ', '–õ–æ–ª–∏—õ', '–õ–æ–º–∏—õ', '–õ–æ–ø–∞–Ω–¥–∏—õ', '–õ—É–±–∞—Ä–¥–∏—õ', '–õ—É–±–∏–Ω–∏—õ', '–õ—É–±—É—Ä–∏—õ', '–õ—É–≥–æ—ö–∏—õ', '–õ—É–∂–∞–∏—õ', '–õ—É–∂–∞—ò–∏—õ', '–õ—É–∫–∞—ò–∏—õ', '–õ—É–∫–∞—á–∏—õ', '–õ—É–∫–µ–Ω–¥–∏—õ', '–õ—É–∫–∏—õ', '–õ—É–∫–∏—á–∏—õ', '–õ—É–Ω–∏—õ', '–õ—É—Ç–∫–∏—õ', '–õ—É—á–∏—õ', '–â–∞–º–∏—õ', '–â–µ–≥–∞–Ω—É—à–∏—õ', '–â–æ—Ç–∏—õ', '–â—É–±–∞–Ω–∏—õ', '–â—É–±–∏—õ', '–â—É–±–∏—á–∏—õ', '–â—É–±–∏—à–∏—õ', '–â—É—à–∏—õ', '–â—É—à–∫–∏—õ', '–ú–∞–≥–ª–∏—õ', '–ú–∞—ò–∫–∏—õ', '–ú–∞–∫–∞—Ä–∏—õ', '–ú–∞–∫–∏–≤–∏—õ', '–ú–∞–∫—Ä–∞–≥–∏—õ', '–ú–∞–∫—Å–∏—õ', '–ú–∞–ª–∞–≤—Ä–∞–∑–∏—õ', '–ú–∞–ª–±–∞—à–∏—õ', '–ú–∞–ª–µ–Ω—á–∏—õ', '–ú–∞–ª–µ—Ç–∏—õ', '–ú–∞–ª–µ—à–∏—õ', '–ú–∞–ª–∏–Ω–∏—õ', '–ú–∞–ª–∏—à–∏—õ', '–ú–∞–ª–æ–±–∞–±–∏—õ', '–ú–∞–ª—É—à–∏—õ', '–ú–∞—ô—É–≥–∏—õ', '–ú–∞—ô—á–∏—õ', '–ú–∞–Ω–¥–∞—Ä–∏—õ', '–ú–∞–Ω–¥–∏–Ω–∏—õ', '–ú–∞–Ω–¥–∏—õ', '–ú–∞–Ω–¥—É—à–∏—õ', '–ú–∞–Ω–∏—õ', '–ú–∞–Ω—á–∏—õ', '–ú–∞—ö–µ–Ω—á–∏—õ', '–ú–∞—Ä–∞–≤–∏—õ', '–ú–∞—Ä–∏–Ω—á–∏—õ', '–ú–∞—Ä–∏—õ', '–ú–∞—Ä–∏—á–∏—õ', '–ú–∞—Ä–∫–∞–≥–∏—õ', '–ú–∞—Ä–∫–µ–ª–∏—õ', '–ú–∞—Ä–∫–µ—ô–∏—õ', '–ú–∞—Ä–∫—É–ª–∏—õ', '–ú–∞—Ä–æ–¥–∏—õ', '–ú–∞—Ä—Ç–∏—õ', '–ú–∞—Ä—É–Ω–∏—õ', '–ú–∞—Ä—É–Ω–∫–∏—õ', '–ú–∞—Ä—É—à–∏—õ', '–ú–∞—Ä—á–µ—Ç–∏—õ', '–ú–∞—Ä—á–∏—õ', '–ú–∞—Å–∞–ª—É—à–∏—õ', '–ú–∞—Å–ª–∞—Ä–∏—õ', '–ú–∞—Å–ª–∏—õ', '–ú–∞—Å–ª–æ–≤–∞—Ä–∏—õ', '–ú–∞—Ç–∞—Ä—É–≥–∏—õ', '–ú–∞—Ç–µ—ò–∏—õ', '–ú–∞—Ç–µ—Ä–∏—õ', '–ú–∞—Ç–∏—õ', '–ú–∞—Ç–∏—á–∏—õ', '–ú–∞—Ç—É—à–∏—õ', '–ú–∞—õ–µ—à–∏—õ', '–ú–∞—õ–∏—õ', '–ú–∞—á–∏—õ', '–ú–∞—á–∫–∏—õ', '–ú–∞—á—É–∂–∏—õ', '–ú–∞—à–∏—õ', '–ú–µ–¥–∏—õ', '–ú–µ–¥—É—Ä–∏—õ', '–ú–µ–∫—Ç–∏—õ', '–ú–µ—Å—É–ª–∏—õ', '–ú–∏—ò–∞–ª—á–∏—õ', '–ú–∏—ò–∞–Ω–∏—õ', '–ú–∏—ò–∞—á–∏—õ', '–ú–∏—ò–∏—õ', '–ú–∏—ò—É—Ü–∏—õ', '–ú–∏–∫–∞—Ä–∏—õ', '–ú–∏–∫–µ–ª–∏—õ', '–ú–∏–∫–µ—Ç–∏—õ', '–ú–∏–∫–∏—õ', '–ú–∏–∫–∏—á–∏—õ', '–ú–∏–∫–æ—ö–∏—õ', '–ú–∏–∫—É–ª–∏—õ', '–ú–∏–ª–∞–¥–∏—õ', '–ú–∏–ª–∞–∫–∏—õ', '–ú–∏–ª–∞—á–∏—õ', '–ú–∏–ª–µ–∫–∏—õ', '–ú–∏–ª–µ–Ω–∏—õ', '–ú–∏–ª–µ—Ç–∏—õ', '–ú–∏–ª–µ—É—Å–Ω–∏—õ', '–ú–∏–ª–µ—à–∏—õ', '–ú–∏–ª–∏—ò–∏—õ', '–ú–∏–ª–∏–∫–∏—õ', '–ú–∏–ª–∏–∫—à–∏—õ', '–ú–∏–ª–∏–Ω–∏—õ', '–ú–∏–ª–∏–Ω—á–∏—õ', '–ú–∏–ª–∏—Å–∞–≤–∏—õ', '–ú–∏–ª–∏—á–∏—õ', '–ú–∏–ª–∏—õ', '–ú–∏–ª–∏—à–∏—õ', '–ú–∏–ª–∫–∏—õ', '–ú–∏–ª–æ–∏—á–∏—õ', '–ú–∏–ª–æ—ò–∏—õ', '–ú–∏–ª–æ—ò–∏—á–∏—õ', '–ú–∏–ª–æ—ò–∫–∏—õ', '–ú–∏–ª–æ—ò—á–∏—õ', '–ú–∏–ª–æ—Ç–∏—õ', '–ú–∏–ª—É–Ω–∏—õ', '–ú–∏–ª—É—à–∏—õ', '–ú–∏–ª—á–∏—õ', '–ú–∏—ô–∞–Ω–∏—õ', '–ú–∏–Ω–¥–∏—õ', '–ú–∏–Ω–∏—õ', '–ú–∏–Ω—á–∏—õ', '–ú–∏–æ–≤—á–∏—õ', '–ú–∏–æ–¥–∞–Ω–∏—õ', '–ú–∏–æ–Ω–∏—õ', '–ú–∏—Ä–∞–∂–∏—õ', '–ú–∏—Ä–∏—õ', '–ú–∏—Ä—ò–∞–Ω–∏—õ', '–ú–∏—Ä–∫–∏—õ', '–ú–∏—Ä–æ—Å–∞–≤–∏—õ', '–ú–∏—Ä—á–µ—Ç–∏—õ', '–ú–∏—Ä—á–∏—õ', '–ú–∏—Å–æ—ò—á–∏—õ', '–ú–∏—Ç–∏—õ', '–ú–∏—Ç—Ä–∞–Ω–∏—õ', '–ú–∏—Ç—Ä–µ–∫–∞–Ω–∏—õ', '–ú–∏—Ç—Ä–∏—õ', '–ú–∏—Ç—Ä—É—à–∏—õ', '–ú–∏—õ–∏—õ', '–ú–∏—Ö–∞—ô—á–∏—õ', '–ú–∏—Ö–æ—ô—á–∏—õ', '–ú–∏—à–µ—ô–∏—õ', '–ú–∏—à–∏—õ', '–ú–∏—à–∫–∏—õ', '–ú–∏—à—É—Ä–∏—õ', '–ú–ª–∞–¥–∏—õ', '–ú–ª–∞—ü–∏—õ', '–ú–æ—ò—Å–∏—õ', '–ú–æ–∫—Ä–∏—õ', '–ú–æ–º–∏—õ', '–ú–æ—Ä–∞—á–∏—õ', '–ú–æ—Ä–µ—Ç–∏—õ', '–ú–æ—Ä–æ–∫–≤–∞—à–∏—õ', '–ú–æ—Ç–∏—á–∏—õ', '–ú—Ä–∞–∫–∏—õ', '–ú—Ä–∞—á–∏—õ', '–ú—Ä–¥–∏—õ', '–ú—Ä–∫–∏—õ', '–ú—Ä–∫–æ—ö–∏—õ', '–ú—Ä–∫—É—à–∏—õ', '–ú—Ä–∫—à–∏—õ', '–ú—É–¥—Ä–∏–Ω–∏—õ', '–ú—É–¥—Ä–∏—õ', '–ú—É–Ω–∏—à–∏—õ', '–ú—É—Ä–≥–∞–Ω–∏—õ', '–ú—É—Ç–∞–≤—ü–∏—õ', '–ú—É—Ç–∏–±–∞—Ä–∏—õ', '–ú—É—á–∏–±–∞–±–∏—õ', '–ú—É—à–∏–∫–∏—õ', '–ù–∞–≤–∞–ª—É—à–∏—õ', '–ù–∞–≥—Ä–∞–¥–∏—õ', '–ù–∞–≥—É–ª–∏—õ', '–ù–∞–¥–∞—à–∫–∏—õ', '–ù–∞—ò–¥–∏—õ', '–ù–∞—ò–∫–∏—õ', '–ù–∞–∫–∞–ª–∞–º–∏—õ', '–ù–∞–∫–∏—õ', '–ù–∞—Ä–∞–Ω—á–∏—õ', '–ù–∞—Ä–∞–Ω—ü–∏—õ', '–ù–∞—Å—Ç–∞—Å–∏—õ', '–ù–∞—Å—Ç–∏—õ', '–ù–µ–±—Ä–∏–≥–∏—õ', '–ù–µ–≤–∞—ò–¥–∏—õ', '–ù–µ–≤–µ–Ω–∏—õ', '–ù–µ–≥–æ–∏—Ü–∏—õ', '–ù–µ–¥–∏–Ω–∏—õ', '–ù–µ–¥–∏—õ', '–ù–µ–∫–∏—õ', '–ù–µ–º–∞—ö–∏—õ', '–ù–µ–Ω–∞–¥–∏—õ', '–ù–µ–Ω–∏—õ', '–ù–µ–æ—Ä–∏—á–∏—õ', '–ù–µ—à–∏—õ', '–ù–∏–∫–µ–∑–∏—õ', '–ù–∏–∫–µ—Ç–∏—õ', '–ù–∏–∫–∏—Ç–∏—õ', '–ù–∏–∫–æ–ª–µ—Ç–∏—õ', '–ù–∏–∫–æ–ª–µ—à–∏—õ', '–ù–∏–∫–æ–ª–∏—õ', '–ù–∏–∫–æ–ª—á–∏—õ', '–ù–∏–∫—à–∏—õ', '–ù–∏–Ω–∏—õ', '–ù–∏–Ω—á–∏—õ', '–ù–∏—á–∏—õ', '–ù–∏—à–∞–≤–∏—õ', '–ù–∏—à–∏—õ', '–ù–æ–≤–∞–ª—É—à–∏—õ', '–ù–æ–≤–∞—Ä–ª–∏—õ', '–ù–æ–≤–∞—á–∏–∫–∏—õ', '–ù–æ–≤–∏—õ', '–ù–æ–≤–∏—á–∏—õ', '–ù–æ–≤—á–∏—õ', '–ù–æ–∂–∏–Ω–∏—õ', '–ù–æ—ò–∫–∏—õ', '–ä–µ–≥–∏—õ', '–ä–µ–≥—Ä–∏—õ', '–ä–µ–∂–∏—õ', '–û–±—Ä–µ–Ω–∏—õ', '–û–¥–∞–≤–∏—õ', '–û–∑–∏–º–∏—õ', '–û—ò–¥–∞–Ω–∏—õ', '–û—ò–∫–∏—õ', '–û–∫–µ—Ç–∏—õ', '–û–∫–æ–ª–∏—õ', '–û–∫—É–ª–∏—õ', '–û–ª–∞—Ä–∏—õ', '–û–ª–∏—õ', '–û–ª—É—ò–∏—õ', '–û—ô–∞—á–∏—õ', '–û–ø–∞–ª–∏—õ', '–û–ø–∞—Ä—É—à–∏—õ', '–û–ø–∞—á–∏—õ', '–û–ø—Ä–∏–∫–∏—õ', '–û–ø—Ä–∏—õ', '–û–ø—Ä–∏—Ü–∏—õ', '–û—Ä–∞–æ–≤—á–∏—õ', '–û—Ä–ª–∞–Ω–¥–∏—õ', '–û—Ä–ª–∏—õ', '–û—Å–º–∞—ò–ª–∏—õ', '–û—Å—Ç–æ—ò–∏—õ', '–û—Ü–æ–∫–æ—ô–∏—õ', '–û—ü–∏—õ', '–ü–∞–≤–∏—õ', '–ü–∞–≤–∏—á–∏—õ', '–ü–∞–≤–ª–µ–∫–∏—õ', '–ü–∞–≤–ª–∏—á–∏—õ', '–ü–∞–≤—á–∏—õ', '–ü–∞–¥–∏—õ', '–ü–∞—ò–∞–≥–∏—õ', '–ü–∞—ò–∏—õ', '–ü–∞—ò–∏—á–∏—õ', '–ü–∞—ò–∫–∏—õ', '–ü–∞—ò—Ç–∏—õ', '–ü–∞–ª–∞–ª–∏—õ', '–ü–∞–ª–∞–Ω–≥–µ—Ç–∏—õ', '–ü–∞–ª–∏–≥–æ—Ä–∏—õ', '–ü–∞–ª–∏—õ', '–ü–∞–Ω–∏–Ω—á–∏—õ', '–ü–∞–Ω–∏—õ', '–ü–∞–Ω–∏—à–∏—õ', '–ü–∞–Ω—Ç–µ–ª–∏—õ', '–ü–∞–Ω—Ç–∏—õ', '–ü–∞–Ω—á–∏—õ', '–ü–∞–Ω—ü–∏—õ', '–ü–∞–ø–∏—õ', '–ü–∞–ø—Ä–∏—õ', '–ü–∞–ø—É–ª–∏—õ', '–ü–∞—Ä–∞–º–µ–Ω—Ç–∏—õ', '–ü–∞—Ä–∞—É—à–∏—õ', '–ü–∞—Ä–∏–≤–æ–¥–∏—õ', '–ü–∞—Ä–ª–∏—õ', '–ü–∞—Ä–æ—ò—á–∏—õ', '–ü–∞—Ç—Ä–Ω–æ–≥–∏—õ', '–ü–∞—É–Ω–∏—õ', '–ü–∞—à–∏—õ', '–ü–µ—ò–∏—õ', '–ü–µ—ò–∏—á–∏—õ', '–ü–µ—ò—É—à–∏—õ', '–ü–µ—ò—á–∏—õ', '–ü–µ–ª–∞–≥–∏—õ', '–ü–µ–Ω–¥–∏—õ', '–ü–µ–Ω–µ–∑–∏—õ', '–ü–µ–Ω—á–∏—õ', '–ü–µ–ø–∏—õ', '–ü–µ—Ä–µ–Ω–∏—õ', '–ü–µ—Ä–∏—õ', '–ü–µ—Ä–∏—á–∏—õ', '–ü–µ—Ä–∏—à–∏—õ', '–ü–µ—Ä—ò–∞–Ω–∏—á–∏—õ', '–ü–µ—Ä–∫–∏—õ', '–ü–µ—Ä–æ—Ç–∏—õ', '–ü–µ—Ä—É–Ω–∏—á–∏—õ', '–ü–µ—Ä—á–∏—õ', '–ü–µ—Ç–∫–∞–Ω–∏—õ', '–ü–µ—Ç—Ä–∏–∫–∏—õ', '–ü–µ—Ç—Ä–∏—õ', '–ü–µ—Ç—Ä–∏—á–∏—õ', '–ü–µ—Ç—Ä–æ–Ω–∏—õ', '–ü–µ—Ç—Ä—É—à–∏—õ', '–ü–µ—É–ª–∏—õ', '–ü–µ—Ü–∏—õ', '–ü–µ—á–µ–Ω–∏—á–∏—õ', '–ü–µ—à–∏—õ', '–ü–∏–∫–∏—õ', '–ü–∏–ª–∏–Ω–¥–∞–≤–∏—õ', '–ü–∏—ô–∞–≥–∏—õ', '–ü–∏–ø–µ—Ä—á–∏—õ', '–ü–∏—Ä–∏–≤–∞—Ç—Ä–∏—õ', '–ü–∏—Ä–∏—õ', '–ü–∏—Å–∞—Ä–∏—õ', '–ü–∏—Ç—É–ª–∏—õ', '–ü—ò–∞–Ω–∏—õ', '–ü—ò–µ–≤–∏—õ', '–ü–ª–∞–≤–∏—õ', '–ü–ª–∞–≤–∫–∏—õ', '–ü–ª–∞–≤—ô–∞–Ω–∏—õ', '–ü–ª–∞–≤—à–∏—õ', '–ü–ª–∞–∑–∏–Ω–∏—õ', '–ü–ª–∞–Ω–∏–Ω—á–∏—õ', '–ü–ª–∞–Ω–∏—õ', '–ü–ª–∞—Ç–∞–Ω–∏—õ', '–ü–ª–∞—á–∏—õ', '–ü–ª–µ–º–∏—õ', '–ü–ª–µ—Å–∫–æ—ö–∏—õ', '–ü–ª–µ—õ–∏—õ', '–ü–ª–∏–Ω—Ç–∏—õ', '–ü–ª–∏—Å–Ω–∏—õ', '–ü–ª–æ—Å–∫–∏—õ', '–ü–ª–æ—á–∏—õ', '–ü—ô–∞–∫–∏—õ', '–ü—ô–µ–≤–∞—ô—á–∏—õ', '–ü–æ–±—É–ª–∏—õ', '–ü–æ–¥–∏–Ω–∏—õ', '–ü–æ–¥—Ä–∞—à—á–∏—õ', '–ü–æ–¥—Ä–∏—õ', '–ü–æ–∑–Ω–∞–Ω–∏—õ', '–ü–æ–∑–Ω–∏—õ', '–ü–æ—ò–∫–∏—õ', '–ü–æ–ª–∏—õ', '–ü–æ–ª–æ–º—á–∏—õ', '–ü–æ–ª—É–≥–∏—õ', '–ü–æ—ö–∞–≤–∏—õ', '–ü–æ–ø –õ–∞–∑–∏—õ', '–ü–æ–ø–∞–¥–∏—õ', '–ü–æ–ø–∞—Ä–∏—õ', '–ü–æ–ø—á–∏—õ', '–ü–æ—Ç—Ä–µ–±–∏—õ', '–ü–æ—à—Ç–∏—õ', '–ü—Ä–∞–≤–¥–∏—õ', '–ü—Ä–∞–∂–∏—õ', '–ü—Ä–µ–¥–∏—õ', '–ü—Ä–µ–∫–∏—õ', '–ü—Ä–µ–ª–∏—õ', '–ü—Ä–µ–Ω–¥–∏—õ', '–ü—Ä–µ—à–∏—õ', '–ü—Ä–∂–∏—õ', '–ü—Ä–∏–±–∏—õ', '–ü—Ä–∏–±–∏—à–∏—õ', '–ü—Ä–∏–≥–æ–¥–∏—õ', '–ü—Ä–∏—ò–∏—õ', '–ü—Ä–∏–∫–∏—õ', '–ü—Ä–∏—à–∏—õ', '–ü—Ä–æ–¥–∞–Ω–∏—õ', '–ü—Ä–æ–∫–∏—õ', '–ü—Ä–æ–∫–æ–ø–∏—õ', '–ü—Ä–æ–ª–∏—õ', '–ü—Ä–æ—Ç–∏—õ', '–ü—Ä–æ—à–∏—õ', '–ü—Ä—É–≥–∏–Ω–∏—õ', '–ü—Ä—É–Ω–∏—õ', '–ü—Ä—à–µ–Ω–¥–∏—õ', '–ü—É–∞–ª–∏—õ', '–ü—É–≤–∞–ª–∏—õ', '–ü—É–≤–∞—á–∏—õ', '–ü—É–¥–∞—Ä–∏—õ', '–ü—É–Ω–∏—à–∏—õ', '–ü—É—Ä–µ—à–∏—õ', '–ü—É—Ä–∏—õ', '–ü—É—Ä–∏—à–∏—õ', '–ü—É—Å–ª–æ—ò–∏—õ', '–ü—É—à–µ—ô–∏—õ', '–†–∞–≤–∏–ª–∏—õ', '–†–∞–¥–∞–Ω—á–∏—õ', '–†–∞–¥–µ—ô–∏—õ', '–†–∞–¥–µ—Ç–∏—õ', '–†–∞–¥–µ—à–∏—õ', '–†–∞–¥–∏–≤–æ—ò—à–∏—õ', '–†–∞–¥–∏–∫–∏—õ', '–†–∞–¥–∏—Å–∞–≤–∏—õ', '–†–∞–¥–∏—õ', '–†–∞–¥–∏—á–∏—õ', '–†–∞–¥–∏—à–∏—õ', '–†–∞–¥–Ω–∏—õ', '–†–∞–¥–æ–∏—á–∏—õ', '–†–∞–¥–æ—ò–∏—á–∏—õ', '–†–∞–¥–æ—ò–∫–∏—õ', '–†–∞–¥–æ—ò—á–∏—õ', '–†–∞–¥–æ–Ω–∏—õ', '–†–∞–¥–æ—ö–∏—õ', '–†–∞–¥–æ—Å–∞–≤–∫–∏—õ', '–†–∞–¥–æ—Ç–∏—õ', '–†–∞–¥—É–∫–∏—õ', '–†–∞–¥—É–ª–∏—õ', '–†–∞–¥—É—ô—á–∏—õ', '–†–∞–¥—É—Ü–∏—õ', '–†–∞–¥—É—à–∏—õ', '–†–∞–∑—É–º–µ–Ω–∏—õ', '–†–∞–∏–ª–∏—õ', '–†–∞–∏—á–∏—õ', '–†–∞—ò–∞—á–∏—õ', '–†–∞—ò–∏—õ', '–†–∞—ò–∏—á–∏—õ', '–†–∞—ò–ª–∏—õ', '–†–∞—ò—á–µ—Ç–∏—õ', '–†–∞—ò—á–∏—õ', '–†–∞—ò—à–∏—õ', '–†–∞–∫–µ–∑–∏—õ', '–†–∞–∫–µ—Ç–∏—õ', '–†–∞–∫–∏–Ω–∏—õ', '–†–∞–∫–∏—Ç–∏—õ', '–†–∞–∫–∏—õ', '–†–∞–∫–æ–Ω–∏—õ', '–†–∞–ª–µ—Ç–∏—õ', '–†–∞–ª–∏—õ', '–†–∞—ô–∏—õ', '–†–∞–º–∏—õ', '–†–∞–Ω—í–∏—õ', '–†–∞–Ω–∏—Å–∞–≤–∏—õ', '–†–∞–Ω–∫–∏—õ', '–†–∞–Ω—á–∏—õ', '–†–∞–æ–Ω–∏—õ', '–†–∞–ø–∞–∏—õ', '–†–∞–ø–∞—ò–∏—õ', '–†–∞—Å—É–ª–∏—õ', '–†–∞—Ç–∫–µ–ª–∏—õ', '–†–∞—É–ª–∏—õ', '–†–∞—Ü–∏—õ', '–†–∞—á–∏—õ', '–†–∞—à–µ—Ç–∏—õ', '–†–∞—à–∏—õ', '–†–∞—à—ô–∏—õ', '–†–µ–≥–æ–¥–∏—õ', '–†–µ–≥—É–ª–∏—õ', '–†–µ–∫–∞–ª–∏—õ', '–†–µ—ô–∏—õ', '–†–µ–º–µ—Ç–∏—õ', '–†–µ–Ω–¥—É–ª–∏—õ', '–†–µ–ø–∞—à–∏—õ', '–†–µ—Å–∏–º–∏—õ', '–†–µ—ü–∏—õ', '–†–∏–±–∞—Ä–∏—õ', '–†–∏–±–æ—à–∫–∏—õ', '–†–∏—í–æ—à–∏—õ', '–†–∏–∑–Ω–∏—õ', '–†–∏–Ω—á–∏—õ', '–†–∏—Å–∏–º–∏—õ', '–†–∏—Å—Ç–∞–Ω–∏—õ', '–†–∏—Å—Ç–∏—õ', '–†–º–∞–Ω–¥–∏—õ', '–†–Ω–∏—õ', '–†–æ–≥–∏—õ', '–†–æ–≥–ª–∏—õ', '–†–æ–≥–æ—ö–∏—õ', '–†–æ–≥—É–ª–∏—õ', '–†–æ–¥–∏—õ', '–†–æ–∑–≥–∏—õ', '–†–æ–∫–≤–∏—õ', '–†–æ–∫–Ω–∏—õ', '–†–æ–∫—Å–∞–Ω–¥–∏—õ', '–†–æ–∫—Å–∏—õ', '–†–æ—ô–∏—õ', '–†–æ–º–∞–Ω–∏—õ', '–†–æ–º–∏—õ', '–†–æ—Å–∏—õ', '–†–æ—à–∫–∏—õ', '–†—É–≤–∏–¥–∏—õ', '–†—É–¥–∏—õ', '–†—É–¥–æ—ö–∏—õ', '–†—É–∂–∏—õ', '–†—É–∂–∏—á–∏—õ', '–†—É–∂–æ—ò—á–∏—õ', '–†—É–º–µ–Ω–∏—õ', '–†—É–Ω–¥–∏—õ', '–†—É—ö–∞—ò–∏—õ', '–†—É—Å–∞–ª–∏—õ', '–†—É—Ç–µ—à–∏—õ', '–†—É—Ç–æ–Ω–∏—õ', '–†—É—à–∫–∏—õ', '–°–∞–±—ô–∏—õ', '–°–∞–≤–∞–Ω–¥–∏—õ', '–°–∞–≤–∞—Ç–∏—õ', '–°–∞–≤–µ–ª–∏—õ', '–°–∞–≤–µ—ô–∏—õ', '–°–∞–≤–∏—õ', '–°–∞–≤–∏—á–∏—õ', '–°–∞–≤–∫–∏—õ', '–°–∞–≤—É—Ä–¥–∏—õ', '–°–∞–≤—á–∏—õ', '–°–∞–ª–∞—Ç–∏—õ', '–°–∞–º–∞—Ä—ü–∏—õ', '–°–∞–Ω–¥–∏—õ', '–°–∞–ø–∞—Ä–¥–∏—õ', '–°–∞—Ä–∞–º–∞–Ω–¥–∏—õ', '–°–∞—Ä–∏—õ', '–°–∞—Ç–∞—Ä–∏—õ', '–°–≤–µ—Ç–ª–∏—á–∏—õ', '–°–≤–∏–ª–∞—Ä–∏—õ', '–°–≤–æ—ò–∏—õ', '–°–µ–∫–∞–Ω–∏—õ', '–°–µ–∫—É–ª–∏—õ', '–°–µ–ª–µ–Ω–∏—õ', '–°–µ–Ω–¥—Ä–∏—õ', '–°–µ–Ω–∏—õ', '–°–µ–Ω–∏—á–∏—õ', '–°–µ–Ω—Ç–∏—õ', '–°–µ—Ç–µ–Ω—á–∏—õ', '–°–∏–±–∏–Ω–∫–∏—õ', '–°–∏–±–∏–Ω—á–∏—õ', '–°–∏–∫–∏–º–∏—õ', '–°–∏–º–∞–Ω–∏—õ', '–°–∏–º–µ–Ω–¥–∏—õ', '–°–∏–º–µ—Ç–∏—õ', '–°–∏–º–∏—õ', '–°–∏–º—É—Ä–¥–∏—õ', '–°–∏–Ω—í–µ–ª–∏—õ', '–°–∏–Ω—í–∏—õ', '–°–∏–Ω–∫–∏—õ', '–°–∏—Ç–Ω–∏—á–∏—õ', '–°—ò–µ–Ω–∏—á–∏—õ', '–°–∫–∞–∫–∏—õ', '–°–∫–µ–ª–∏—õ', '–°–∫–µ–Ω—ü–∏—õ', '–°–∫–µ—Ä–ª–∏—õ', '–°–∫–æ–∫–∏—õ', '–°–∫–æ—á–∞—ò–∏—õ', '–°–∫–æ—á–∏—õ', '–°–∫—Ä–æ–±–∏—õ', '–°–∫—É–ª–∏—õ', '–°–ª–∞–≤–∏—õ', '–°–ª–∞–≤–Ω–∏—õ', '–°–ª–∞–¥–∏—õ', '–°–ª–æ–≤–∏—õ', '–°–º–∏–ª–∏—õ', '–°–º–∏—ô–∞–Ω–∏—õ', '–°–º–∏—ô–∏—õ', '–°–º–∏—ô–∫–∏—õ', '–°–º–æ—ô–∞–Ω–∏—õ', '–°–º—Ä–µ–∫–∏—õ', '–°–æ–≤—Ä–ª–∏—õ', '–°–æ–≤—Ç–∏—õ', '–°–æ—ò–∫–∏—õ', '–°–æ–∫–∏—õ', '–°–æ–∫–Ω–∏—õ', '–°–æ–ª–¥–∞—Ç–∏—õ', '–°–æ—Ä–∞—ò–∏—õ', '–°–æ—Å–∫–∏—õ', '–°–æ—Ñ–∏—ò–∞–Ω–∏—õ', '–°–æ—Ñ—Ä–∞–Ω–∏—õ', '–°–æ—Ñ—Ä–µ–Ω–∏—õ', '–°–æ—Ñ—Ä–æ–Ω–∏—õ', '–°–ø–∞–∏—õ', '–°–ø–∞–∫–∏—õ', '–°–ø–∞—Ä–∏—õ', '–°–ø–∞—Å–µ–Ω–∏—õ', '–°–ø–∞—Å–∏—õ', '–°–ø–µ–Ω—á–∏—õ', '–°–ø–µ—Ä–ª–∏—õ', '–°–ø–∏—Ä–∏—õ', '–°–ø—Ä–µ–º–∏—õ', '–°–ø—É–∂–∏—õ', '–°—Ä–µ–¥–∏—õ', '–°—Ä–µ—Ç–∏—õ', '–°—Ç–∞–≤—Ä–∏—õ', '–°—Ç–∞—ò–∏—õ', '–°—Ç–∞—ò–∫–∏—õ', '–°—Ç–∞—ò—á–∏—õ', '–°—Ç–∞—ò—à–∏—õ', '–°—Ç–∞–∫–∏—õ', '–°—Ç–∞–∫—É—à–∏—õ', '–°—Ç–∞–º–∞—Ç–∏—õ', '–°—Ç–∞–º–±–æ–ª–∏—õ', '–°—Ç–∞–º–µ–Ω–∏—õ', '–°—Ç–∞–º–µ–Ω—á–∏—õ', '–°—Ç–∞–Ω–∞—Ä—á–∏—õ', '–°—Ç–∞–Ω–µ—Ç–∏—õ', '–°—Ç–∞–Ω–∏–∫–∏—õ', '–°—Ç–∞–Ω–∏—Å–∞–≤–∏—õ', '–°—Ç–∞–Ω–∏—õ', '–°—Ç–∞–Ω–∏—á–∏—õ', '–°—Ç–∞–Ω–∏—à–∏—õ', '–°—Ç–∞–Ω–∫–∏—õ', '–°—Ç–∞–Ω–æ–≤—á–∏—õ', '–°—Ç–∞–Ω–æ—ò—á–∏—õ', '–°—Ç–∞–Ω—É—à–∏—õ', '–°—Ç–∞–Ω—á–µ—Ç–∏—õ', '–°—Ç–∞–Ω—á–∏—õ', '–°—Ç–∞—à–∏—õ', '–°—Ç–µ–≤–∞–Ω–¥–∏—õ', '–°—Ç–µ–≤–∞–Ω–µ—Ç–∏—õ', '–°—Ç–µ–≤–∞–Ω–∏—õ', '–°—Ç–µ–≤–µ–ª–∏—õ', '–°—Ç–µ–≤–∏—õ', '–°—Ç–µ–≤—á–∏—õ', '–°—Ç–µ–≥–∏—õ', '–°—Ç–µ–≥—ö–∞–∏—õ', '–°—Ç–µ–≥—ö–∞—ò–∏—õ', '–°—Ç–µ–∫–∏—õ', '–°—Ç–µ—ô–∏—õ', '–°—Ç–µ–ø–∞–Ω–¥–∏—õ', '–°—Ç–µ–ø–∞–Ω–∏—õ', '–°—Ç–µ–ø–∏—õ', '–°—Ç–∏—ò–∞—á–∏—õ', '–°—Ç–∏—ò–µ–ø–∏—õ', '–°—Ç–∏–∫–∏—õ', '–°—Ç—ò–µ–ø–∏—õ', '–°—Ç–æ–∂–∏–Ω–∏—õ', '–°—Ç–æ—ò–∞–Ω–∏—õ', '–°—Ç–æ—ò–∞–Ω–∫–∏—õ', '–°—Ç–æ—ò–∞–Ω—á–∏—õ', '–°—Ç–æ—ò–∞—á–∏—õ', '–°—Ç–æ—ò–∏—õ', '–°—Ç–æ—ò–∏—á–∏—õ', '–°—Ç–æ—ò–∫–∏—õ', '–°—Ç–æ—ò–Ω–∏—õ', '–°—Ç–æ—ò—á–∏—õ', '–°—Ç–æ—ò—à–∏—õ', '–°—Ç–æ–∫–∞–Ω–∏—õ', '–°—Ç–æ–∫–∏—õ', '–°—Ç–æ–ª–∏—õ', '–°—Ç–æ–ø–∞—Ä–∏—õ', '–°—Ç–æ–ø–∏—õ', '–°—Ç–æ—à–∏—õ', '–°—Ç—Ä–∞—ò–Ω–∏—õ', '–°—Ç—Ä–∞—Ö–∏–Ω–∏—õ', '–°—Ç—Ä–∞—Ö–∏—ö–∏—õ', '–°—Ç—Ä–∏–Ω–∏—õ', '–°—É–±–æ—Ç–∏—õ', '–°—É–≤–∞—ò—ü–∏—õ', '–°—É–º–µ–Ω–∏—õ', '–°—É–Ω–∞—Ä–∏—õ', '–°—É—Ä–ª–∏—õ', '–°—É—Ä—É—á–∏—õ', '–¢–∞–¥–∏—õ', '–¢–∞—ò—Å–∏—õ', '–¢–∞–º–∏–Ω—ü–∏—õ', '–¢–∞–Ω–∞—Å–∏—õ', '–¢–∞–Ω–∏—õ', '–¢–∞–Ω–∫–æ—Å–∏—õ', '–¢–∞–Ω—á–∏—õ', '–¢–∞—Ä–∞–±–∏—õ', '–¢–∞—Å–∏—õ', '–¢–∞—Ç–∏—à–∏—õ', '–¢–≤—Ä–¥–∏—à–∏—õ', '–¢–µ–æ–¥–æ—Å–∏—õ', '–¢–µ–ø–∏—õ', '–¢–µ–ø—à–∏—õ', '–¢–µ—Ä–∑–∏—õ', '–¢–µ—Å–ª–∏—õ', '–¢–µ—à–∞–Ω–∏—õ', '–¢–µ—à–∞–Ω–∫–∏—õ', '–¢–µ—à–µ–Ω–¥–∏—õ', '–¢–µ—à–∏–Ω–∏—õ', '–¢–µ—à–∏—õ', '–¢–∏—ò–∞–Ω–∏—õ', '–¢–∏–º–∏–ª–∏—õ', '–¢–∏–º–æ—Ç–∏—õ', '–¢–∏—Ä–∏—õ', '–¢–∏—Ä–Ω–∞–Ω–∏—õ', '–¢–º—É—à–∏—õ', '–¢–æ–≤–∞—Ä–∏—à–∏—õ', '–¢–æ–¥–∏—õ', '–¢–æ–¥–æ—Ä–∏—õ', '–¢–æ–¥–æ—Å–∏—õ', '–¢–æ—ò–∏—õ', '–¢–æ–∫–∞–ª–∏—õ', '–¢–æ—ô–∞–≥–∏—õ', '–¢–æ–º–∞–Ω–∏—õ', '–¢–æ–º–µ—Ü–∏—õ', '–¢–æ–º–∏–Ω—á–∏—õ', '–¢–æ–º–∏—õ', '–¢–æ–º–∏—á–∏—õ', '–¢–æ–º–æ—ö–∏—õ', '–¢–æ–º—á–∏—õ', '–¢–æ–Ω—Ç–∏—õ', '–¢–æ–Ω—á–∏—õ', '–¢–æ–ø–∏—õ', '–¢–æ–ø–ª–∏—á–∏—õ', '–¢–æ–ø–æ–ª–∏—õ', '–¢–æ—Å–∫–∏—õ', '–¢–æ—à–∞–Ω–∏—õ', '–¢–æ—à–∏—õ', '–¢—Ä–∞–≤–æ—Ä–∏—õ', '–¢—Ä–∞–ø–∞—Ä–∏—õ', '–¢—Ä–µ–Ω—á–∏—õ', '–¢—Ä–∏–≤–∞–ª–∏—õ', '–¢—Ä–∏–≤–∏—õ', '–¢—Ä–∏–≤—É–Ω–∏—õ', '–¢—Ä–∏–≤—É–Ω—á–∏—õ', '–¢—Ä–∏—ò–∏—õ', '–¢—Ä–∏–∫–∏—õ', '–¢—Ä–∏–Ω–¥–∏—õ', '–¢—Ä–∏–ø–∏—õ', '–¢—Ä–∏—Ñ—É—ö–∞–≥–∏—õ', '–¢—Ä–∏—à–∏—õ', '–¢—Ä–º—á–∏—õ', '–¢—Ä–Ω–∏–Ω–∏—õ', '–¢—Ä–Ω–∏—õ', '–¢—Ä–æ—à–∏—õ', '–¢—Ä—É–±–∞—ò–∏—õ', '–¢—Ä—É–¥–∏—õ', '–¢—Ä—É—ò–∏—õ', '–¢—Ä—É—ò–∫–∏—õ', '–¢—É–±–æ—ö–∏—õ', '–¢—É–∫–µ–ª–∏—õ', '–¢—É–º–∞—Ä–∏—õ', '–¢—É–ø–∞—ò–∏—õ', '–¢—É—Ä–∞—ò–ª–∏—õ', '–¢—É—Ä–Ω–∏—õ', '–¢—É—Ä—É–¥–∏—õ', '–¢—É—Ä—É–Ω—á–∏—õ', '–¢—É—Ç–∏—õ', '–¢—É—Ç–æ—Ä–∏—õ', '–¢—É—Ç—É–ª–∏—õ', '–¢—É—Ñ–µ–≥—ü–∏—õ', '–¢—É—Ü–∏—õ', '–ã–∞—ò–∏—õ', '–ã–∞–ª–∏—õ', '–ã–∞—Ç–∏—õ', '–ã–µ–±–∏—õ', '–ã–µ–ª–∏—õ', '–ã–µ—Ä–∞–Ω–∏—õ', '–ã–∏–ø—Ä–∞–Ω–∏—õ', '–ã–∏—Ä–∏—õ', '–ã–∏—Ä—ò–∞–Ω–∏—õ', '–ã–æ—ò–±–∞—à–∏—õ', '–ã–æ–ø–∏—õ', '–ã–æ—Ä–∏—õ', '–ã–æ—Å–∏—õ', '–ã—É–∏—õ', '–ã—É—ò–∏—õ', '–ã—É–ø–∏—õ', '–ã—É—Ä–¥–∏—õ', '–ã—É—Ä–∏—õ', '–ã—É—Ä—á–∏—õ', '–ã—É—à–∏—õ', '–£–±–∞–≤–∏—õ', '–£–±–∞–≤–∫–∏—õ', '–£–≤–∞–ª–∏—õ', '–£–≤–µ—Ä–∏—õ', '–£–≥—ô–µ—à–∏—õ', '–£–≥—Ä–∏–Ω–∏—õ', '–£–≥—Ä–∏–Ω—á–∏—õ', '–£–≥—Ä–∏—á–∏—õ', '–£–¥–æ–≤–∏—á–∏—õ', '–£–¥–æ–≤—á–∏—õ', '–£–º–µ—ô–∏—õ', '–£–º–µ—Ç–∏—õ', '–£–º–∏—ô–µ–Ω–¥–∏—õ', '–£—Ä—à–∏–∫–∏—õ', '–£—Å—Ç–∏—õ', '–£—Ç–≤–∏—õ', '–£—à–µ–Ω–¥–∏—õ', '–§–∞—Ä–∫–∏—õ', '–§–∞—Ç–∏—õ', '–§–µ–º–∏—õ', '–§–∏–ª–∏–ø–∏—õ', '–§–æ—Ç–∏—Ä–∏—õ', '–§–æ—Ç–∏—õ', '–§—Ä—Ç—É–Ω–∏—õ', '–•–∞—ü–∏ –ê–Ω—Ç–∏—õ', '–•–∞—ü–∏ –à–æ–≤–∞–Ω—á–∏—õ', '–•–∞—ü–∏ –ù–∏–∫–æ–ª–∏—õ', '–•–∞—ü–∏ –†–∏—Å—Ç–∏—õ', '–•–∞—ü–∏ –¢–∞–Ω—á–∏—õ', '–•–∞—ü–∏—õ', '–•–∏–Ω–∏—õ', '–•—Ä–∏—Å—Ç–∏—õ', '–¶–∞—ò–∏—õ', '–¶–∞–∫–∏—õ', '–¶–∞—Ä–∏—õ', '–¶–∞—Ä–∏—á–∏—õ', '–¶–≤–µ—ò–∏—õ', '–¶–≤–µ—Ç–∏—õ', '–¶–≤–∏—ò–µ—Ç–∏—õ', '–¶–≤–∏—ò–∏—õ', '–¶–≤–∏–∫–∏—õ', '–¶–≤–∏—à–∏—õ', '–¶–µ–Ω–∏—õ', '–¶–µ–Ω–∫–∏—õ', '–¶–∏–≤–∏—à–∏—õ', '–¶–∏–≤—Ä–∏—õ', '–¶–∏–≥–ª–∏—õ', '–¶–∏–∫–ª—É—à–∏—õ', '–¶–∏—Ü–≤–∞—Ä–∏—õ', '–¶–º–∏—ô–∞–Ω–∏—õ', '–¶–º–æ–ª–∏—õ', '–¶–æ–Ω–∏—õ', '–¶—Ä–Ω–æ–≤—á–∏—õ', '–¶—É–∫–∞–Ω–∏—õ', '–¶—É–∫–∏—õ', '–¶—É–ø–∞—Ä–∏—õ', '–ß–∞–±—Ä–∏—õ', '–ß–∞–≤–∏—õ', '–ß–∞—ò–∏—õ', '–ß–∞–ª–µ–Ω–∏—õ', '–ß–∞–ª–∏—õ', '–ß–∞–º–∞–≥–∏—õ', '–ß–∞–Ω—Ç—Ä–∏—õ', '–ß–∞–ø—Ä—ö–∏—õ', '–ß–∞—Ä–∞–ø–∏—õ', '–ß–∞—Ä–Ω–∏—õ', '–ß–≤–æ–∫–∏—õ', '–ß–≤–æ—Ä–∏—õ', '–ß–µ–ª–µ–∫–µ—Ç–∏—õ', '–ß–µ–º–µ—Ä–∏–∫–∏—õ', '–ß–µ—á–∞—Ä–∏—õ', '–ß–∏–≤—á–∏—õ', '–ß–∏–∫–∞—Ä–∏—õ', '–ß–∏–∫–∏—õ', '–ß–∏–ø–ª–∏—õ', '–ß–∏–ø—á–∏—õ', '–ß–∏—á–∏—õ', '–ß–∫–æ–≤—Ä–∏—õ', '–ß–æ–±–µ–ª–∏—õ', '–ß–æ–±–µ—ô–∏—õ', '–ß–æ–≤–∏—õ', '–ß–æ—ò–∏—õ', '–ß–æ—ò—á–∏—õ', '–ß–æ–ª–∞–Ω–∏—õ', '–ß–æ–ª–∏—õ', '–ß–æ–º–∏—õ', '–ß–æ–Ω–∫–∏—õ', '–ß–æ—ö–∞–≥–∏—õ', '–ß–æ—Ä–±–∏—õ', '–ß–æ—Ç—Ä–∏—õ', '–ß–æ—á—É—Ä–∏—õ', '–ß—É–±—Ä–∏—õ', '–ß—É–¥–∏—õ', '–ß—É–∫–∞—Ä–∏—õ', '–ß—É–∫–∏—õ', '–ß—É–º–∏—õ', '–ß—É–ø–µ—ô–∏—õ', '–ß—É–ø–µ—Ä–∫–∏—õ', '–ß—É–ø–∏—õ', '–ß—É—Ç—É—Ä–∏—õ', '–è–∞–≤—Ä–∏—õ', '–è–∞—ò–∏—õ', '–è–∞–º–±–∏—õ', '–è–∞—ü–∏—õ', '–è–µ–ª–µ–±—ü–∏—õ', '–è–∏–∫–∏—õ', '–è–∏–Ω–∏—õ', '–è–æ–¥–∏—õ', '–è–æ–º–±–∏—õ', '–è–æ–º–∏—õ', '–è–æ–Ω–∏—õ', '–®–∞–∫–∏—õ', '–®–∞–∫–æ—Ç–∏—õ', '–®–∞–ª–∏–Ω–∏—õ', '–®–∞–º–∞—Ç–∏—õ', '–®–∞–Ω—Ç–∏—õ', '–®–∞–ø–∏—õ', '–®–∞–ø–æ–Ω–∏—õ', '–®–∞–ø–æ—ö–∏—õ', '–®–∞–ø—É—Ä–∏—õ', '–®–∞—Ä–∞–Ω—á–∏—õ', '–®–∞—Ä–∏—õ', '–®–∞—Ä–∫–∏—õ', '–®–∞—Ä–æ—ö–∏—õ', '–®–∞—à–∏—õ', '–®–≤–∞–±–∏—õ', '–®–µ–≤–∞—Ä–ª–∏—õ', '–®–µ–≤–∏—õ', '–®–µ–≤–∫—É—à–∏—õ', '–®–µ—Å—Ç–∏—õ', '–®–∏–±–∞–ª–∏—õ', '–®–∏—ò–∞–∫–∏—ö–∏—õ', '–®–∏—ò–∞—á–∏—õ', '–®–∏–∫–∞–Ω–∏—õ', '–®–∏–∫–∞—ö–∏—õ', '–®–∏–º—à–∏—õ', '–®–∏–ø–µ—Ç–∏—õ', '–®–∏—à–∏—õ', '–®–∫–æ–±–∏—õ', '–®–∫–æ–¥—Ä–∏—õ', '–®–∫–æ–Ω–¥—Ä–∏—õ', '–®–∫–æ—Ä–∏—õ', '–®–∫—Ä–±–∏—õ', '–®–∫—Ä–µ–±–∏—õ', '–®–∫—É–ª–∏—õ', '–®–∫—É–Ω–¥—Ä–∏—õ', '–®—ô–∞–ø–∏—õ', '–®—ô–∏–≤–∏—õ', '–®—ô—É–∫–∏—õ', '–®–º–∏–≥–∏—õ', '–®–æ–±–∞—ò–∏—õ', '–®–æ–±–∞—á–∏—õ', '–®–æ—Ä–≥–∏—õ', '–®–æ—à–∫–∏—õ', '–®–ø–∏—Ä–∏—õ', '–®—Ç–∞–∫–∏—õ', '–®—Ç—É–ª–∏—õ', '–®—É–±–∞–∫–∏—õ', '–®—É–±–∞—Ä–∏—õ', '–®—É–±–∏—õ', '–®—É–ª–µ–∏—õ', '–®—É–ª–µ—ò–∏—õ', '–®—É–ª–µ—Ç–∏—õ', '–®—É–ª–∫–∏—õ', '–®—É–ª—É–±—É—Ä–∏—õ', '–®—É—ô–∞–≥–∏—õ', '–®—É–º–∞—Ç–∏—õ', '–®—É–Ω–¥–µ—Ä–∏—õ', '–®—É–Ω–∫–∏—õ', '–®—É—ö–µ–≤–∞—Ä–∏—õ', '–®—É—Ç—É—ô–∏—õ', '–®—É—à–∏—õ', '–®—É—à—É–ª–∏—õ',
    );
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         <?php

/*
 * This file is part of SwiftMailer.
 * (c) 2004-2009 Chris Corbyn
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * Generated when a TransportException is thrown from the Transport system.
 *
 * @author Chris Corbyn
 */
class Swift_Events_TransportExceptionEvent extends Swift_Events_EventObject
{
    /**
     * The Exception thrown.
     *
     * @var Swift_TransportException
     */
    private $exception;

    /**
     * Create a new TransportExceptionEvent for $transport.
     *
     * @param Swift_Transport          $transport
     * @param Swift_TransportException $ex
     */
    public function __construct(Swift_Transport $transport, Swift_TransportException $ex)
    {
        parent::__construct($transport);
        $this->exception = $ex;
    }

    /**
     * Get the TransportException thrown.
     *
     * @return Swift_TransportException
     */
    public function getException()
    {
        return $this->exception;
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  <?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\CssSelector\Tests\Node;

use Symfony\Component\CssSelector\Node\HashNode;
use Symfony\Component\CssSelector\Node\ElementNode;

class HashNodeTest extends AbstractNodeTest
{
    public function getToStringConversionTestData()
    {
        return array(
            array(new HashNode(new ElementNode(), 'id'), 'Hash[Element[*]#id]'),
        );
    }

    public function getSpecificityValueTestData()
    {
        return array(
            array(new HashNode(new ElementNode(), 'id'), 100),
            array(new HashNode(new ElementNode(null, 'id'), 'class'), 101),
        );
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\HttpKernel\Controller\ArgumentResolver;

use Psr\Container\ContainerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpKernel\Controller\ArgumentValueResolverInterface;
use Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadata;

/**
 * Yields a service keyed by _controller and argument name.
 *
 * @author Nicolas Grekas <p@tchwork.com>
 */
final class ServiceValueResolver implements ArgumentValueResolverInterface
{
    private $container;

    public function __construct(ContainerInterface $container)
    {
        $this->container = $container;
    }

    /**
     * {@inheritdoc}
     */
    public function supports(Request $request, ArgumentMetadata $argument)
    {
        return is_string($controller = $request->attributes->get('_controller')) && $this->container->has($controller) && $this->container->get($controller)->has($argument->getName());
    }

    /**
     * {@inheritdoc}
     */
    public function resolve(Request $request, ArgumentMetadata $argument)
    {
        yield $this->container->get($request->attributes->get('_controller'))->get($argument->getName());
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               <?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\Routing\Loader;

use Symfony\Component\Config\Loader\Loader;
use Symfony\Component\Routing\RouteCollection;

/**
 * ClosureLoader loads routes from a PHP closure.
 *
 * The Closure must return a RouteCollection instance.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
class ClosureLoader extends Loader
{
    /**
     * Loads a Closure.
     *
     * @param \Closure    $closure A Closure
     * @param string|null $type    The resource type
     *
     * @return RouteCollection A RouteCollection instance
     */
    public function load($closure, $type = null)
    {
        return $closure();
    }

    /**
     * {@inheritdoc}
     */
    public function supports($resource, $type = null)
    {
        return $resource instanceof \Closure && (!$type || 'closure' === $type);
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       INDX( 	                 (   ÿ  Ë       ”                    5˘     Ä n     4˘     ¸+ïb‘ ﬂ≠0H”k,ïb‘˙˚+ïb‘x       x                E x c e p t i o n I n t e r f a c e . p h p   6˘     ê z     4˘     √",ïb‘ ﬂ≠0H”ã<,ïb‘∫",ïb‘Ë       Â                I n v a l i d C a l l b a c k E x c e p t i o n . p h p       7˘     à r     4˘     ŒI,ïb‘ ﬂ≠0H”Éc,ïb‘ I,ïb‘‡       ›                I n v a l i d F i l e E x c e p t i o n . p h p       8˘     à r     4˘     ∏p,ïb‘ ﬂ≠0H ﬁã,ïb‘≤p,ïb‘‡       ›                I n v a l i d P a t h E x c e p t i o n . p h p       9˘     Ä p     4˘     kô,ïb‘ ﬂ≠0H”œ≤,ïb‘fô,ïb‘–                        V a l i d a t i o n E x c e p t i o n . p h p                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        <?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\CssSelector\Parser\Handler;

use Symfony\Component\CssSelector\Parser\Reader;
use Symfony\Component\CssSelector\Parser\TokenStream;

/**
 * CSS selector handler interface.
 *
 * This component is a port of the Python cssselect library,
 * which is copyright Ian Bicking, @see https://github.com/SimonSapin/cssselect.
 *
 * @author Jean-Fran√ßois Simon <jeanfrancois.simon@sensiolabs.com>
 *
 * @internal
 */
interface HandlerInterface
{
    /**
     * @return bool
     */
    public function handle(Reader $reader, TokenStream $stream): bool;
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\HttpKernel\Tests\DataCollector;

use PHPUnit\Framework\TestCase;
use Symfony\Component\Debug\Exception\SilencedErrorContext;
use Symfony\Component\HttpKernel\DataCollector\LoggerDataCollector;

class LoggerDataCollectorTest extends TestCase
{
    public function testCollectWithUnexpectedFormat()
    {
        $logger = $this
            ->getMockBuilder('Symfony\Component\HttpKernel\Log\DebugLoggerInterface')
            ->setMethods(array('countErrors', 'getLogs', 'clear'))
            ->getMock();
        $logger->expects($this->once())->method('countErrors')->will($this->returnValue('foo'));
        $logger->expects($this->exactly(2))->method('getLogs')->will($this->returnValue(array()));

        $c = new LoggerDataCollector($logger, __DIR__.'/');
        $c->lateCollect();
        $compilerLogs = $c->getCompilerLogs()->getValue('message');

        $this->assertSame(array(
            array('message' => 'Removed service "Psr\Container\ContainerInterface"; reason: private alias.'),
            array('message' => 'Removed service "Symfony\Component\DependencyInjection\ContainerInterface"; reason: private alias.'),
        ), $compilerLogs['Symfony\Component\DependencyInjection\Compiler\RemovePrivateAliasesPass']);

        $this->assertSame(array(
            array('message' => 'Some custom logging message'),
            array('message' => 'With ending :'),
        ), $compilerLogs['Unknown Compiler Pass']);
    }

    /**
     * @dataProvider getCollectTestData
     */
    public function testCollect($nb, $logs, $expectedLogs, $expectedDeprecationCount, $expectedScreamCount, $expectedPriorities = null)
    {
        $logger = $this
            ->getMockBuilder('Symfony\Component\HttpKernel\Log\DebugLoggerInterface')
            ->setMethods(array('countErrors', 'getLogs', 'clear'))
            ->getMock();
        $logger->expects($this->once())->method('countErrors')->will($this->returnValue($nb));
        $logger->expects($this->exactly(2))->method('getLogs')->will($this->returnValue($logs));

        $c = new LoggerDataCollector($logger);
        $c->lateCollect();

        $this->assertEquals('logger', $c->getName());
        $this->assertEquals($nb, $c->countErrors());

        $logs = array_map(function ($v) {
            if (isset($v['context']['exception'])) {
                $e = &$v['context']['exception'];
                $e = isset($e["\0*\0message"]) ? array($e["\0*\0message"], $e["\0*\0severity"]) : array($e["\0Symfony\Component\Debug\Exception\SilencedErrorContext\0severity"]);
            }

            return $v;
        }, $c->getLogs()->getValue(true));
        $this->assertEquals($expectedLogs, $logs);
        $this->assertEquals($expectedDeprecationCount, $c->countDeprecations());
        $this->assertEquals($expectedScreamCount, $c->countScreams());

        if (isset($expectedPriorities)) {
            $this->assertSame($expectedPriorities, $c->getPriorities()->getValue(true));
        }
    }

    public function testReset()
    {
        $logger = $this
            ->getMockBuilder('Symfony\Component\HttpKernel\Log\DebugLoggerInterface')
            ->setMethods(array('countErrors', 'getLogs', 'clear'))
            ->getMock();
        $logger->expects($this->once())->method('clear');

        $c = new LoggerDataCollector($logger);
        $c->reset();
    }

    public function getCollectTestData()
    {
        yield 'simple log' => array(
            1,
            array(array('message' => 'foo', 'context' => array(), 'priority' => 100, 'priorityName' => 'DEBUG')),
            array(array('message' => 'foo', 'context' => array(), 'priority' => 100, 'priorityName' => 'DEBUG')),
            0,
            0,
        );

        yield 'log with a context' => array(
            1,
            array(array('message' => 'foo', 'context' => array('foo' => 'bar'), 'priority' => 100, 'priorityName' => 'DEBUG')),
            array(array('message' => 'foo', 'context' => array('foo' => 'bar'), 'priority' => 100, 'priorityName' => 'DEBUG')),
            0,
            0,
        );

        if (!class_exists(SilencedErrorContext::class)) {
            return;
        }

        yield 'logs with some deprecations' => array(
            1,
            array(
                array('message' => 'foo3', 'context' => array('exception' => new \ErrorException('warning', 0, E_USER_WARNING)), 'priority' => 100, 'priorityName' => 'DEBUG'),
                array('message' => 'foo', 'context' => array('exception' => new \ErrorException('deprecated', 0, E_DEPRECATED)), 'priority' => 100, 'priorityName' => 'DEBUG'),
                array('message' => 'foo2', 'context' => array('exception' => new \ErrorException('deprecated', 0, E_USER_DEPRECATED)), 'priority' => 100, 'priorityName' => 'DEBUG'),
            ),
            array(
                array('message' => 'foo3', 'context' => array('exception' => array('warning', E_USER_WARNING)), 'priority' => 100, 'priorityName' => 'DEBUG'),
                array('message' => 'foo', 'context' => array('exception' => array('deprecated', E_DEPRECATED)), 'priority' => 100, 'priorityName' => 'DEBUG', 'errorCount' => 1, 'scream' => false),
                array('message' => 'foo2', 'context' => array('exception' => array('deprecated', E_USER_DEPRECATED)), 'priority' => 100, 'priorityName' => 'DEBUG', 'errorCount' => 1, 'scream' => false),
            ),
            2,
            0,
            array(100 => array('count' => 3, 'name' => 'DEBUG')),
        );

        yield 'logs with some silent errors' => array(
            1,
            array(
                array('message' => 'foo3', 'context' => array('exception' => new \ErrorException('warning', 0, E_USER_WARNING)), 'priority' => 100, 'priorityName' => 'DEBUG'),
                array('message' => 'foo3', 'context' => array('exception' => new SilencedErrorContext(E_USER_WARNING, __FILE__, __LINE__)), 'priority' => 100, 'priorityName' => 'DEBUG'),
            ),
            array(
                array('message' => 'foo3', 'context' => array('exception' => array('warning', E_USER_WARNING)), 'priority' => 100, 'priorityName' => 'DEBUG'),
                array('message' => 'foo3', 'context' => array('exception' => array(E_USER_WARNING)), 'priority' => 100, 'priorityName' => 'DEBUG', 'errorCount' => 1, 'scream' => true),
            ),
            0,
            1,
        );
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         <?php

/*
 * This file is part of the Monolog package.
 *
 * (c) Jordi Boggiano <j.boggiano@seld.be>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Monolog\Handler;

use Monolog\Logger;
use Monolog\Handler\SyslogUdp\UdpSocket;

/**
 * A Handler for logging to a remote syslogd server.
 *
 * @author Jesper Skovgaard Nielsen <nulpunkt@gmail.com>
 */
class SyslogUdpHandler extends AbstractSyslogHandler
{
    protected $socket;
    protected $ident;

    /**
     * @param string  $host
     * @param int     $port
     * @param mixed   $facility
     * @param int     $level    The minimum logging level at which this handler will be triggered
     * @param Boolean $bubble   Whether the messages that are handled can bubble up the stack or not
     * @param string  $ident    Program name or tag for each log message.
     */
    public function __construct($host, $port = 514, $facility = LOG_USER, $level = Logger::DEBUG, $bubble = true, $ident = 'php')
    {
        parent::__construct($facility, $level, $bubble);

        $this->ident = $ident;

        $this->socket = new UdpSocket($host, $port ?: 514);
    }

    protected function write(array $record)
    {
        $lines = $this->splitMessageIntoLines($record['formatted']);

        $header = $this->makeCommonSyslogHeader($this->logLevels[$record['level']]);

        foreach ($lines as $line) {
            $this->socket->write($line, $header);
        }
    }

    public function close()
    {
        $this->socket->close();
    }

    private function splitMessageIntoLines($message)
    {
        if (is_array($message)) {
            $message = implode("\n", $message);
        }

        return preg_split('/$\R?^/m', $message, -1, PREG_SPLIT_NO_EMPTY);
    }

    /**
     * Make common syslog header (see rfc5424)
     */
    protected function makeCommonSyslogHeader($severity)
    {
        $priority = $severity + $this->facility;

        if (!$pid = getmypid()) {
            $pid = '-';
        }

        if (!$hostname = gethostname()) {
            $hostname = '-';
        }

        return "<$priority>1 " .
            $this->getDateTime() . " " .
            $hostname . " " .
            $this->ident . " " .
            $pid . " - - ";
    }

    protected function getDateTime()
    {
        return date(\DateTime::RFC3339);
    }

    /**
     * Inject your own socket, mainly used for testing
     */
    public function setSocket($socket)
    {
        $this->socket = $socket;
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            <?php

namespace Illuminate\Contracts\Debug;

use Exception;

interface ExceptionHandler
{
    /**
     * Report or log an exception.
     *
     * @param  \Exception  $e
     * @return void
     */
    public function report(Exception $e);

    /**
     * Render an exception into an HTTP response.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Exception  $e
     * @return \Symfony\Component\HttpFoundation\Response
     */
    public function render($request, Exception $e);

    /**
     * Render an exception to the console.
     *
     * @param  \Symfony\Component\Console\Output\OutputInterface  $output
     * @param  \Exception  $e
     * @return void
     */
    public function renderForConsole($output, Exception $e);
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         <?php

namespace Illuminate\Log;

use Closure;
use RuntimeException;
use Psr\Log\LoggerInterface;
use Illuminate\Log\Events\MessageLogged;
use Illuminate\Contracts\Support\Jsonable;
use Illuminate\Contracts\Events\Dispatcher;
use Illuminate\Contracts\Support\Arrayable;

class Logger implements LoggerInterface
{
    /**
     * The underlying logger implementation.
     *
     * @var \Psr\Log\LoggerInterface
     */
    protected $logger;

    /**
     * The event dispatcher instance.
     *
     * @var \Illuminate\Contracts\Events\Dispatcher
     */
    protected $dispatcher;

    /**
     * Create a new log writer instance.
     *
     * @param  \Psr\Log\LoggerInterface  $logger
     * @param  \Illuminate\Contracts\Events\Dispatcher|null  $dispatcher
     * @return void
     */
    public function __construct(LoggerInterface $logger, Dispatcher $dispatcher = null)
    {
        $this->logger = $logger;

        if (isset($dispatcher)) {
            $this->dispatcher = $dispatcher;
        }
    }

    /**
     * Log an emergency message to the logs.
     *
     * @param  string  $message
     * @param  array  $context
     * @return void
     */
    public function emergency($message, array $context = [])
    {
        $this->writeLog(__FUNCTION__, $message, $context);
    }

    /**
     * Log an alert message to the logs.
     *
     * @param  string  $message
     * @param  array  $context
     * @return void
     */
    public function alert($message, array $context = [])
    {
        $this->writeLog(__FUNCTION__, $message, $context);
    }

    /**
     * Log a critical message to the logs.
     *
     * @param  string  $message
     * @param  array  $context
     * @return void
     */
    public function critical($message, array $context = [])
    {
        $this->writeLog(__FUNCTION__, $message, $context);
    }

    /**
     * Log an error message to the logs.
     *
     * @param  string  $message
     * @param  array  $context
     * @return void
     */
    public function error($message, array $context = [])
    {
        $this->writeLog(__FUNCTION__, $message, $context);
    }

    /**
     * Log a warning message to the logs.
     *
     * @param  string  $message
     * @param  array  $context
     * @return void
     */
    public function warning($message, array $context = [])
    {
        $this->writeLog(__FUNCTION__, $message, $context);
    }

    /**
     * Log a notice to the logs.
     *
     * @param  string  $message
     * @param  array  $context
     * @return void
     */
    public function notice($message, array $context = [])
    {
        $this->writeLog(__FUNCTION__, $message, $context);
    }

    /**
     * Log an informational message to the logs.
     *
     * @param  string  $message
     * @param  array  $context
     * @return void
     */
    public function info($message, array $context = [])
    {
        $this->writeLog(__FUNCTION__, $message, $context);
    }

    /**
     * Log a debug message to the logs.
     *
     * @param  string  $message
     * @param  array  $context
     * @return void
     */
    public function debug($message, array $context = [])
    {
        $this->writeLog(__FUNCTION__, $message, $context);
    }

    /**
     * Log a message to the logs.
     *
     * @param  string  $level
     * @param  string  $message
     * @param  array  $context
     * @return void
     */
    public function log($level, $message, array $context = [])
    {
        $this->writeLog($level, $message, $context);
    }

    /**
     * Dynamically pass log calls into the writer.
     *
     * @param  string  $level
     * @param  string  $message
     * @param  array  $context
     * @return void
     */
    public function write($level, $message, array $context = [])
    {
        $this->writeLog($level, $message, $context);
    }

    /**
     * Write a message to the log.
     *
     * @param  string  $level
     * @param  string  $message
     * @param  array  $context
     * @return void
     */
    protected function writeLog($level, $message, $context)
    {
        $this->fireLogEvent($level, $message = $this->formatMessage($message), $context);

        $this->logger->{$level}($message, $context);
    }

    /**
     * Register a new callback handler for when a log event is triggered.
     *
     * @param  \Closure  $callback
     * @return void
     *
     * @throws \RuntimeException
     */
    public function listen(Closure $callback)
    {
        if (! isset($this->dispatcher)) {
            throw new RuntimeException('Events dispatcher has not been set.');
        }

        $this->dispatcher->listen(MessageLogged::class, $callback);
    }

    /**
     * Fires a log event.
     *
     * @param  string  $level
     * @param  string  $message
     * @param  array   $context
     * @return void
     */
    protected function fireLogEvent($level, $message, array $context = [])
    {
        // If the event dispatcher is set, we will pass along the parameters to the
        // log listeners. These are useful for building profilers or other tools
        // that aggregate all of the log messages for a given "request" cycle.
        if (isset($this->dispatcher)) {
            $this->dispatcher->dispatch(new MessageLogged($level, $message, $context));
        }
    }

    /**
     * Format the parameters for the logger.
     *
     * @param  mixed  $message
     * @return mixed
     */
    protected function formatMessage($message)
    {
        if (is_array($message)) {
            return var_export($message, true);
        } elseif ($message instanceof Jsonable) {
            return $message->toJson();
        } elseif ($message instanceof Arrayable) {
            return var_export($message->toArray(), true);
        }

        return $message;
    }

    /**
     * Get the underlying logger implementation.
     *
     * @return \Psr\Log\LoggerInterface
     */
    public function getLogger()
    {
        return $this->logger;
    }

    /**
     * Get the event dispatcher instance.
     *
     * @return \Illuminate\Contracts\Events\Dispatcher
     */
    public function getEventDispatcher()
    {
        return $this->dispatcher;
    }

    /**
     * Set the event dispatcher instance.
     *
     * @param  \Illuminate\Contracts\Events\Dispatcher  $dispatcher
     * @return void
     */
    public function setEventDispatcher(Dispatcher $dispatcher)
    {
        $this->dispatcher = $dispatcher;
    }

    /**
     * Dynamically proxy method calls to the underlying logger.
     *
     * @param  string  $method
     * @param  array  $parameters
     * @return mixed
     */
    public function __call($method, $parameters)
    {
        return $this->logger->{$method}(...$parameters);
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      <?php
/**
 * Mockery
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://github.com/padraic/mockery/blob/master/LICENSE
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to padraic@php.net so we can send you a copy immediately.
 *
 * @category   Mockery
 * @package    Mockery
 * @copyright  Copyright (c) 2010 P√°draic Brady (http://blog.astrumfutura.com)
 * @license    http://github.com/padraic/mockery/blob/master/LICENSE New BSD License
 */

namespace Mockery\Exception;

class InvalidArgumentException extends \InvalidArgumentException
{
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  INDX( 	                 (   ò  Ë                             )    Ä l     (    dkzöb‘ 8i›œÆ”Úãzöb‘dkzöb‘        ∫               C l i T e s t D o x P r i n t e r . p h p     *    Ä l     (    åõzöb‘ 8i›œÆ”´±zöb‘Ñõzöb‘       ˛
               H t m l R e s u l t P r i n t e r . p h p     +    x f     (    &ºzöb‘ 8i›œÆ”i–zöb‘"ºzöb‘       „	               N a m e P r e t t i f i e r . p h p   ,    x d     (    ä€zöb‘ 8i›œÆ”ÄÙzöb‘ä€zöb‘ 0      »!              R e s u l t P r i n t e r . p h p     -    p ^     (    Bˇzöb‘ 8i›œÆ”ó{öb‘>ˇzöb‘       à               T e s t R e s u l t . p h p   .    Ä l     (    8{öb‘ 8i›œÆ”Ì3{öb‘2{öb‘       ∏               T e x t R e s u l t P r i n t e r . p h p     /    Ä j     (    ]>{öb‘ 8i›œÆ”⁄T{öb‘T>{öb‘        ˛               X m l R e s u l t P r i n t e r . p h p                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              INDX( 	                 (   H  Ë       p                     ‡    x d     ﬂ    ò[Ùöb‘ o≈√j©”7pÙöb‘ê[Ùöb‘       É               C a c h e d D o u b l e r . p h p     ·    h V     ﬂ    ˙|Ùöb‘ o≈√j©”	œıöb‘ˆ|Ùöb‘                       
 C l a s s P a t c h   Î    x h     ﬂ    5ÿıöb‘ o≈√j©”ÂÌıöb‘0ÿıöb‘Ë      ‚               D o u b l e I n t e r f a c e . p h p Ï    h X     ﬂ    ]˘ıöb‘ o≈√j©”/ˆöb‘Z˘ıöb‘        è               D o u b l e r . p h  Ì    h T     ﬂ    Jˆöb‘ o≈√j©”aö˜öb‘Fˆöb‘                       	 G e n e r a t o r     ˜    p ^     ﬂ    å¢˜öb‘ o≈√j©”Xπ˜öb‘å¢˜öb‘       F               L a z y D o u b l e . p h p   ¯    x d     ﬂ    ∑ƒ˜öb‘ o≈√j©”íÿ˜öb‘∞ƒ˜öb‘       ä               N a m e G e n e r a t o r . p h p                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            âPNG

   IHDR         xwñΩ   	pHYs  ¬  ¬n–u>  
OiCCPPhotoshop ICC profile  x⁄ùSgTSÈ=˜ﬁÙBKàÄîKoR RBãÄë&*!	Jà!°ŸQ¡EE»†àééÄåQ,ä
ÿ‰!¢éÉ£àä ˚·{£k÷º˜ÊÕ˛µ◊>Á¨Ûù≥œ¿ñH3Q5Ä©B‡É«ƒ∆·‰.@Å
$p ≥d!s˝# ¯~<<+"¿æ x” ¿Mõ¿0áˇÍBô\ÄÑ¿të8KÄ @zéB¶ @FÄùò&S † `Àcb„ P- `'Ê” Äù¯ô{ [î!†ë  eàD h; ¨œVäE X0 fKƒ9 ÿ- 0IWfH ∞∑ ¿Œ≤  0QàÖ) { `»##x Ñô FÚW<Ò+ÆÁ*  xô≤<π$9EÅ[-qWW.(ŒI+6aaö@.¬yô2Å4‡ÛÃ  †ë‡ÉÛ˝xŒÆŒŒ6é∂_-Íøˇ"bb„˛Âœ´p@  ·t~—˛,/≥Ä;Äm˛¢%Óh^†u˜ãf≤@µ †È⁄WÛp¯~<<E°êπŸŸÂ‰‰ÿJƒB[a W}˛g¬_¿W˝l˘~<¸˜ı‡æ‚$Å2]ÅG¯‡¬ÃÙL•œí	Ñb‹ÊèG¸∑ˇ¸”"ƒIbπX*„QqéDöåÛ2•"âBí)≈%“ˇd‚ﬂ,˚>ﬂ5 ∞j>{ë-®]cˆK'Xt¿‚˜  Úªo¡‘(ÄhÉ·œwˇÔ?˝G†% ÄfIíq  ^D$.T ≥?«  D†Å*∞AÙ¡,¿¡‹¡¸`6ÑB$ƒ¬BB
dÄr`)¨ÇB(ÜÕ∞*`/‘@4¿QhÜìp.¬U∏=p˙aû¡(ºÅ	A»a!⁄àbäX#éôÖ¯!¡Hã$ …àQ"Kë5H1RäT UHÚ=r9á\F∫ë;» 2Ç¸ÜºG1îÅ≤Q=‘µCπ®7ÑF¢–dt1öè†õ–r¥=å6°Á–´h⁄è>C«0¿Ë3ƒl0.∆√B±8,	ìcÀ±"¨´∆∞V¨ªâıcœ±wÅE¿	6wB aAHXLXNÿH® $4⁄	7	ÑQ¬'"ì®K¥&∫˘ƒb21áXH,#÷è/{àCƒ7$âC2'πêI±§T““F“nR#È,©õ4H#ì…⁄dk≤9î, +»Ö‰ù‰√‰3‰‰!Ú[
ùb@q§¯S‚(R jJÂÂ4Âeò2AU£öR›®°T5èZB≠°∂RØQá®4uö9ÕÉIK•≠¢ï”hh˜iØËt∫›ïNó–W“ÀÈGËóËÙwÜÉ«àg(õgwØòL¶”ã«T071ÎòÁôôoUX*∂*|ë 
ïJï&ï*/T©™¶™ﬁ™UÛUÀTè©^S}ÆFU3S„©	‘ñ´U™ùPÎSSg©;®á™g®oT?§~Y˝âY√L√OC§Q†±_„º∆ c≥x,!k´ÜuÅ5ƒ&±ÕŸ|v*ªò˝ªã=™©°9C3J3W≥RÛîf?„òq¯útN	Á(ßóÛ~äﬁÔ)‚)¶4Lπ1e\k™ñóñX´H´Q´GÎΩ6ÆÌßù¶ΩEªY˚ÅA«J'\'GgèŒùÁSŸS›ß
ßM=:ıÆ.™k•°ªDwønßÓòûæ^ÄûLoßﬁyΩÁ˙}/˝T˝m˙ßıGX≥$€Œ<≈5qo</«€ÒQC]√@C•aïaó·Ñëπ—<£’FçFåi∆\„$„m∆m∆£&&!&KMÍMÓöRMπ¶)¶;L;L«ÕÃÕ¢Õ÷ô5õ=1◊2ÁõÁõ◊õﬂ∑`ZxZ,∂®∂∏eI≤‰Z¶YÓ∂ºnÖZ9Y•XUZ]≥F≠ù≠%÷ª≠ªßßπNìN´û÷g√∞Ò∂…∂©∑∞Âÿ€Æ∂m∂}agbg∑≈Æ√ÓìΩì}∫}ç˝=áŸ´Z~s¥r:V:ﬁöŒúÓ?}≈ÙñÈ/gXœœÿ3„∂À)ƒiùSõ”GggπsÉÛàãâKÇÀ.ó>.õ∆›»Ω‰Jtıq]·z“ıùõ≥õ¬Ì®€ØÓ6ÓiÓá‹üÃ4ü)ûY3s–√»C‡QÂ—?üï0kﬂ¨~OCOÅgµÁ#/c/ëW≠◊∞∑•w™˜aÔ>ˆ>rü„>„<7ﬁ2ﬁY_Ã7¿∑»∑ÀO√oû_ÖﬂC#ˇdˇzˇ— ßÄ%gâÅAÅ[˚¯z|!øé?:€eˆ≤ŸÌAå†πAAèÇ≠ÇÂ¡≠!h»Ïê≠!˜ÁòŒëŒiÖP~Ë÷–aÊaã√~'ÖáÖWÜ?épàX—1ó5w—‹CsﬂD˙DñDﬁõg1O9Ø-J5*>™.j<⁄7∫4∫?∆.fYÃ’XùXIlK9.*Æ6nlæﬂ¸ÌÛá‚ù‚„{ò/»]py°Œ¬ÙÖß©.,:ñ@LàN8îA*®å%Úw%é
y¬¬g"/—6—àÿC\*NÚH*MzíÏëº5y$≈3•,ÂπÑ'©êºLL›õ:ûöv m2=:Ω1ÉíëêqB™!Mì∂gÍgÊfvÀ¨eÖ≤˛≈nã∑/ï…k≥ê¨Y-
∂B¶ËTZ(◊*≤geWføÕâ 9ñ´û+ÕÌÃ≥ €ê7úÔüˇÌ¬·í∂•ÜKW-XÊΩ¨j9≤<qy€
„+ÜV¨<∏ä∂*m’O´ÌWóÆ~Ω&zMkÅ^¡ Ç¡µkÎU
ÂÖ}Î‹◊Ì]OX/Yﬂµa˙Üù>âäÆ€óÿ(‹xÂáo øô‹î¥©´ƒπdœf“fÈÊﬁ-û[ñ™óÊónŸ⁄¥ﬂV¥ÌıˆE€/óÕ(€ªÉ∂Cπ£ø<∏ºeß…ŒÕ;?T§TÙT˙T6Ó“›µa◊¯n—Ó{ºˆ4Ï’€[º˜˝>…æ€UUM’f’e˚I˚≥˜?Æâ™È¯ñ˚m]≠NmqÌ«“˝#∂◊π‘’“=TRè÷+ÎG«æ˛ùÔw-6Uçú∆‚#pDy‰È˜	ﬂ˜:⁄vå{¨·”vg/jBöÚöFõSö˚[b[∫OÃ>—÷Íﬁz¸G€ú4<YyJÛT…i⁄ÈÇ”ìgÚœåùïù}~.˘‹`€¢∂{ÁcŒﬂjoÔ∫t·“EˇãÁ;º;Œ\Ú∏tÚ≤€ÂW∏WöØ:_mÍtÍ<˛ì”O«ªúªöÆπ\kπÓzΩµ{f˜Èû7Œ›ÙΩyÒˇ÷’û9=›ΩÛzo˜≈˜ıﬂ›~r'˝ŒÀªŸw'Ó≠ºOº_Ù@ÌAŸC›á’?[˛‹ÿÔ‹j¿w†Û—‹G˜ÖÉœ˛ëıèCèôèÀÜÜÎû8>99‚?r˝È¸ßCœdœ&û˛¢˛ÀÆ/~¯’Î◊Œ—ò—°óÚóìøm|•˝Í¿ÎØ€∆¬∆æ…x31^ÙV˚Ì¡w‹wÔ£ﬂO‰| (ˇh˘±ıS–ß˚ìììˇòÛ¸c3-€    cHRM  z%  ÄÉ  ˘ˇ  ÄÈ  u0  Í`  :ò  oí_≈F   úIDATx⁄‹’±
√ Ö·ﬂ>Ç Ùy⁄ÁŒP:u
yç@÷B9äã$÷∆kÜpª¯Å’I¢wNê‰ÄÔâx‡RI⁄ªŒí&}2JÚ[≥-H5‘ä )dPËÅ$(nAVHÇ∆5(dóG⁄7Ø”æ,*\:ÆX:.s¿≤¬±gÖøﬁëV‰êg%÷ k˛%pÆ¿\tÛ3æ BÙ¿WåVı˝    IENDÆB`Ç                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               <?php

namespace Faker\Provider\sl_SI;

class Payment extends \Faker\Provider\Payment
{
    /**
     * International Bank Account Number (IBAN)
     * @link http://en.wikipedia.org/wiki/International_Bank_Account_Number
     * @param  string  $prefix      for generating bank account number of a specific bank
     * @param  string  $countryCode ISO 3166-1 alpha-2 country code
     * @param  integer $length      total length without country code and 2 check digits
     * @return string
     */
    public static function bankAccountNumber($prefix = '', $countryCode = 'SI', $length = null)
    {
        return static::iban($countryCode, $prefix, $length);
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    <?php

namespace Illuminate\Filesystem;

use Carbon\Carbon;
use RuntimeException;
use Illuminate\Http\File;
use Illuminate\Support\Str;
use InvalidArgumentException;
use Illuminate\Http\UploadedFile;
use Illuminate\Support\Collection;
use League\Flysystem\AdapterInterface;
use PHPUnit\Framework\Assert as PHPUnit;
use League\Flysystem\FilesystemInterface;
use League\Flysystem\AwsS3v3\AwsS3Adapter;
use League\Flysystem\FileNotFoundException;
use League\Flysystem\Rackspace\RackspaceAdapter;
use League\Flysystem\Adapter\Local as LocalAdapter;
use Illuminate\Contracts\Filesystem\Cloud as CloudFilesystemContract;
use Illuminate\Contracts\Filesystem\Filesystem as FilesystemContract;
use Illuminate\Contracts\Filesystem\FileNotFoundException as ContractFileNotFoundException;

/**
 * @mixin \League\Flysystem\FilesystemInterface
 */
class FilesystemAdapter implements FilesystemContract, CloudFilesystemContract
{
    /**
     * The Flysystem filesystem implementation.
     *
     * @var \League\Flysystem\FilesystemInterface
     */
    protected $driver;

    /**
     * Create a new filesystem adapter instance.
     *
     * @param  \League\Flysystem\FilesystemInterface  $driver
     * @return void
     */
    public function __construct(FilesystemInterface $driver)
    {
        $this->driver = $driver;
    }

    /**
     * Assert that the given file exists.
     *
     * @param  string  $path
     * @return void
     */
    public function assertExists($path)
    {
        PHPUnit::assertTrue(
            $this->exists($path), "Unable to find a file at path [{$path}]."
        );
    }

    /**
     * Assert that the given file does not exist.
     *
     * @param  string  $path
     * @return void
     */
    public function assertMissing($path)
    {
        PHPUnit::assertFalse(
            $this->exists($path), "Found unexpected file at path [{$path}]."
        );
    }

    /**
     * Determine if a file exists.
     *
     * @param  string  $path
     * @return bool
     */
    public function exists($path)
    {
        return $this->driver->has($path);
    }

    /**
     * Get the full path for the file at the given "short" path.
     *
     * @param  string  $path
     * @return string
     */
    public function path($path)
    {
        return $this->driver->getAdapter()->getPathPrefix().$path;
    }

    /**
     * Get the contents of a file.
     *
     * @param  string  $path
     * @return string
     *
     * @throws \Illuminate\Contracts\Filesystem\FileNotFoundException
     */
    public function get($path)
    {
        try {
            return $this->driver->read($path);
        } catch (FileNotFoundException $e) {
            throw new ContractFileNotFoundException($path, $e->getCode(), $e);
        }
    }

    /**
     * Write the contents of a file.
     *
     * @param  string  $path
     * @param  string|resource  $contents
     * @param  mixed  $options
     * @return bool
     */
    public function put($path, $contents, $options = [])
    {
        $options = is_string($options)
                     ? ['visibility' => $options]
                     : (array) $options;

        // If the given contents is actually a file or uploaded file instance than we will
        // automatically store the file using a stream. This provides a convenient path
        // for the developer to store streams without managing them manually in code.
        if ($contents instanceof File ||
            $contents instanceof UploadedFile) {
            return $this->putFile($path, $contents, $options);
        }

        return is_resource($contents)
                ? $this->driver->putStream($path, $contents, $options)
                : $this->driver->put($path, $contents, $options);
    }

    /**
     * Store the uploaded file on the disk.
     *
     * @param  string  $path
     * @param  \Illuminate\Http\File|\Illuminate\Http\UploadedFile  $file
     * @param  array  $options
     * @return string|false
     */
    public function putFile($path, $file, $options = [])
    {
        return $this->putFileAs($path, $file, $file->hashName(), $options);
    }

    /**
     * Store the uploaded file on the disk with a given name.
     *
     * @param  string  $path
     * @param  \Illuminate\Http\File|\Illuminate\Http\UploadedFile  $file
     * @param  string  $name
     * @param  array  $options
     * @return string|false
     */
    public function putFileAs($path, $file, $name, $options = [])
    {
        $stream = fopen($file->getRealPath(), 'r+');

        // Next, we will format the path of the file and store the file using a stream since
        // they provide better performance than alternatives. Once we write the file this
        // stream will get closed automatically by us so the developer doesn't have to.
        $result = $this->put(
            $path = trim($path.'/'.$name, '/'), $stream, $options
        );

        if (is_resource($stream)) {
            fclose($stream);
        }

        return $result ? $path : false;
    }

    /**
     * Get the visibility for the given path.
     *
     * @param  string  $path
     * @return string
     */
    public function getVisibility($path)
    {
        if ($this->driver->getVisibility($path) == AdapterInterface::VISIBILITY_PUBLIC) {
            return FilesystemContract::VISIBILITY_PUBLIC;
        }

        return FilesystemContract::VISIBILITY_PRIVATE;
    }

    /**
     * Set the visibility for the given path.
     *
     * @param  string  $path
     * @param  string  $visibility
     * @return void
     */
    public function setVisibility($path, $visibility)
    {
        return $this->driver->setVisibility($path, $this->parseVisibility($visibility));
    }

    /**
     * Prepend to a file.
     *
     * @param  string  $path
     * @param  string  $data
     * @param  string  $separator
     * @return int
     */
    public function prepend($path, $data, $separator = PHP_EOL)
    {
        if ($this->exists($path)) {
            return $this->put($path, $data.$separator.$this->get($path));
        }

        return $this->put($path, $data);
    }

    /**
     * Append to a file.
     *
     * @param  string  $path
     * @param  string  $data
     * @param  string  $separator
     * @return int
     */
    public function append($path, $data, $separator = PHP_EOL)
    {
        if ($this->exists($path)) {
            return $this->put($path, $this->get($path).$separator.$data);
        }

        return $this->put($path, $data);
    }

    /**
     * Delete the file at a given path.
     *
     * @param  string|array  $paths
     * @return bool
     */
    public function delete($paths)
    {
        $paths = is_array($paths) ? $paths : func_get_args();

        $success = true;

        foreach ($paths as $path) {
            try {
                if (! $this->driver->delete($path)) {
                    $success = false;
                }
            } catch (FileNotFoundException $e) {
                $success = false;
            }
        }

        return $success;
    }

    /**
     * Copy a file to a new location.
     *
     * @param  string  $from
     * @param  string  $to
     * @return bool
     */
    public function copy($from, $to)
    {
        return $this->driver->copy($from, $to);
    }

    /**
     * Move a file to a new location.
     *
     * @param  string  $from
     * @param  string  $to
     * @return bool
     */
    public function move($from, $to)
    {
        return $this->driver->rename($from, $to);
    }

    /**
     * Get the file size of a given file.
     *
     * @param  string  $path
     * @return int
     */
    public function size($path)
    {
        return $this->driver->getSize($path);
    }

    /**
     * Get the mime-type of a given file.
     *
     * @param  string  $path
     * @return string|false
     */
    public function mimeType($path)
    {
        return $this->driver->getMimetype($path);
    }

    /**
     * Get the file's last modification time.
     *
     * @param  string  $path
     * @return int
     */
    public function lastModified($path)
    {
        return $this->driver->getTimestamp($path);
    }

    /**
     * Get the URL for the file at the given path.
     *
     * @param  string  $path
     * @return string
     */
    public function url($path)
    {
        $adapter = $this->driver->getAdapter();

        if (method_exists($adapter, 'getUrl')) {
            return $adapter->getUrl($path);
        } elseif ($adapter instanceof AwsS3Adapter) {
            return $this->getAwsUrl($adapter, $path);
        } elseif ($adapter instanceof RackspaceAdapter) {
            return $this->getRackspaceUrl($adapter, $path);
        } elseif ($adapter instanceof LocalAdapter) {
            return $this->getLocalUrl($path);
        } else {
            throw new RuntimeException('This driver does not support retrieving URLs.');
        }
    }

    /**
     * Get the URL for the file at the given path.
     *
     * @param  \League\Flysystem\AwsS3v3\AwsS3Adapter  $adapter
     * @param  string  $path
     * @return string
     */
    protected function getAwsUrl($adapter, $path)
    {
        return $adapter->getClient()->getObjectUrl(
            $adapter->getBucket(), $adapter->getPathPrefix().$path
        );
    }

    /**
     * Get the URL for the file at the given path.
     *
     * @param  \League\Flysystem\Rackspace\RackspaceAdapter $adapter
     * @param  string $path
     * @return string
     */
    protected function getRackspaceUrl($adapter, $path)
    {
        return (string) $adapter->getContainer()->getObject($path)->getPublicUrl();
    }

    /**
     * Get the URL for the file at the given path.
     *
     * @param  string  $path
     * @return string
     */
    protected function getLocalUrl($path)
    {
        $config = $this->driver->getConfig();

        // If an explicit base URL has been set on the disk configuration then we will use
        // it as the base URL instead of the default path. This allows the developer to
        // have full control over the base path for this filesystem's generated URLs.
        if ($config->has('url')) {
            return rtrim($config->get('url'), '/').'/'.ltrim($path, '/');
        }

        $path = '/storage/'.$path;

        // If the path contains "storage/public", it probably means the developer is using
        // the default disk to generate the path instead of the "public" disk like they
        // are really supposed to use. We will remove the public from this path here.
        if (Str::contains($path, '/storage/public/')) {
            return Str::replaceFirst('/public/', '/', $path);
        } else {
            return $path;
        }
    }

    /**
     * Get a temporary URL for the file at the given path.
     *
     * @param  string  $path
     * @param  \DateTimeInterface  $expiration
     * @param  array  $options
     * @return string
     */
    public function temporaryUrl($path, $expiration, array $options = [])
    {
        $adapter = $this->driver->getAdapter();

        if (method_exists($adapter, 'getTemporaryUrl')) {
            return $adapter->getTemporaryUrl($path, $expiration, $options);
        } elseif ($adapter instanceof AwsS3Adapter) {
            return $this->getAwsTemporaryUrl($adapter, $path, $expiration, $options);
        } elseif ($adapter instanceof RackspaceAdapter) {
            return $this->getRackspaceTemporaryUrl($adapter, $path, $expiration, $options);
        } else {
            throw new RuntimeException('This driver does not support creating temporary URLs.');
        }
    }

    /**
     * Get a temporary URL for the file at the given path.
     *
     * @param  \League\Flysystem\AwsS3v3\AwsS3Adapter  $adapter
     * @param  string $path
     * @param  \DateTimeInterface $expiration
     * @param  array $options
     * @return string
     */
    public function getAwsTemporaryUrl($adapter, $path, $expiration, $options)
    {
        $client = $adapter->getClient();

        $command = $client->getCommand('GetObject', array_merge([
            'Bucket' => $adapter->getBucket(),
            'Key' => $adapter->getPathPrefix().$path,
        ], $options));

        return (string) $client->createPresignedRequest(
            $command, $expiration
        )->getUri();
    }

    /**
     * Get a temporary URL for the file at the given path.
     *
     * @param  \League\Flysystem\Rackspace\RackspaceAdapter $adapter
     * @param  string $path
     * @param  \DateTimeInterface $expiration
     * @param  $options
     * @return string
     */
    public function getRackspaceTemporaryUrl($adapter, $path, $expiration, $options)
    {
        return $adapter->getContainer()->getObject($path)->getTemporaryUrl(
            Carbon::now()->diffInSeconds($expiration),
            $options['method'] ?? 'GET',
            $options['forcePublicUrl'] ?? true
        );
    }

    /**
     * Get an array of all files in a directory.
     *
     * @param  string|null  $directory
     * @param  bool  $recursive
     * @return array
     */
    public function files($directory = null, $recursive = false)
    {
        $contents = $this->driver->listContents($directory, $recursive);

        return $this->filterContentsByType($contents, 'file');
    }

    /**
     * Get all of the files from the given directory (recursive).
     *
     * @param  string|null  $directory
     * @return array
     */
    public function allFiles($directory = null)
    {
        return $this->files($directory, true);
    }

    /**
     * Get all of the directories within a given directory.
     *
     * @param  string|null  $directory
     * @param  bool  $recursive
     * @return array
     */
    public function directories($directory = null, $recursive = false)
    {
        $contents = $this->driver->listContents($directory, $recursive);

        return $this->filterContentsByType($contents, 'dir');
    }

    /**
     * Get all (recursive) of the directories within a given directory.
     *
     * @param  string|null  $directory
     * @return array
     */
    public function allDirectories($directory = null)
    {
        return $this->directories($directory, true);
    }

    /**
     * Create a directory.
     *
     * @param  string  $path
     * @return bool
     */
    public function makeDirectory($path)
    {
        return $this->driver->createDir($path);
    }

    /**
     * Recursively delete a directory.
     *
     * @param  string  $directory
     * @return bool
     */
    public function deleteDirectory($directory)
    {
        return $this->driver->deleteDir($directory);
    }

    /**
     * Get the Flysystem driver.
     *
     * @return \League\Flysystem\FilesystemInterface
     */
    public function getDriver()
    {
        return $this->driver;
    }

    /**
     * Filter directory contents by type.
     *
     * @param  array  $contents
     * @param  string  $type
     * @return array
     */
    protected function filterContentsByType($contents, $type)
    {
        return Collection::make($contents)
            ->where('type', $type)
            ->pluck('path')
            ->values()
            ->all();
    }

    /**
     * Parse the given visibility value.
     *
     * @param  string|null  $visibility
     * @return string|null
     *
     * @throws \InvalidArgumentException
     */
    protected function parseVisibility($visibility)
    {
        if (is_null($visibility)) {
            return;
        }

        switch ($visibility) {
            case FilesystemContract::VISIBILITY_PUBLIC:
                return AdapterInterface::VISIBILITY_PUBLIC;
            case FilesystemContract::VISIBILITY_PRIVATE:
                return AdapterInterface::VISIBILITY_PRIVATE;
        }

        throw new InvalidArgumentException('Unknown visibility: '.$visibility);
    }

    /**
     * Pass dynamic methods call onto Flysystem.
     *
     * @param  string  $method
     * @param  array  $parameters
     * @return mixed
     *
     * @throws \BadMethodCallException
     */
    public function __call($method, array $parameters)
    {
        return call_user_func_array([$this->driver, $method], $parameters);
    }
}
                                                                                                          <?php

/*
 * This file is part of Psy Shell.
 *
 * (c) 2012-2017 Justin Hileman
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Psy\Command;

use Psy\Context;
use Psy\ContextAware;
use Psy\Exception\ThrowUpException;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

/**
 * Throw an exception out of the Psy Shell.
 */
class ThrowUpCommand extends Command implements ContextAware
{
    /**
     * Context instance (for ContextAware interface).
     *
     * @var Context
     */
    protected $context;

    /**
     * ContextAware interface.
     *
     * @param Context $context
     */
    public function setContext(Context $context)
    {
        $this->context = $context;
    }

    /**
     * {@inheritdoc}
     */
    protected function configure()
    {
        $this
            ->setName('throw-up')
            ->setDefinition(array(
                new InputArgument('exception', InputArgument::OPTIONAL, 'Exception to throw'),
            ))
            ->setDescription('Throw an exception out of the Psy Shell.')
            ->setHelp(
                <<<'HELP'
Throws an exception out of the current the Psy Shell instance.

By default it throws the most recent exception.

e.g.
<return>>>> throw-up</return>
<return>>>> throw-up $e</return>
HELP
            );
    }

    /**
     * {@inheritdoc}
     *
     * @throws InvalidArgumentException if there is no exception to throw
     * @throws ThrowUpException         because what else do you expect it to do?
     */
    protected function execute(InputInterface $input, OutputInterface $output)
    {
        if ($name = $input->getArgument('exception')) {
            $orig = $this->context->get(preg_replace('/^\$/', '', $name));
        } else {
            $orig = $this->context->getLastException();
        }

        if (!$orig instanceof \Exception) {
            throw new \InvalidArgumentException('throw-up can only throw Exceptions');
        }

        throw new ThrowUpException($orig);
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       <?php
/*
 * This file is part of the Recursion Context package.
 *
 * (c) Sebastian Bergmann <sebastian@phpunit.de>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace SebastianBergmann\RecursionContext;

/**
 * A context containing previously processed arrays and objects
 * when recursively processing a value.
 */
final class Context
{
    /**
     * @var array[]
     */
    private $arrays;

    /**
     * @var \SplObjectStorage
     */
    private $objects;

    /**
     * Initialises the context
     */
    public function __construct()
    {
        $this->arrays  = array();
        $this->objects = new \SplObjectStorage;
    }

    /**
     * Adds a value to the context.
     *
     * @param array|object $value The value to add.
     *
     * @return int|string The ID of the stored value, either as a string or integer.
     *
     * @throws InvalidArgumentException Thrown if $value is not an array or object
     */
    public function add(&$value)
    {
        if (is_array($value)) {
            return $this->addArray($value);
        } elseif (is_object($value)) {
            return $this->addObject($value);
        }

        throw new InvalidArgumentException(
            'Only arrays and objects are supported'
        );
    }

    /**
     * Checks if the given value exists within the context.
     *
     * @param array|object $value The value to check.
     *
     * @return int|string|false The string or integer ID of the stored value if it has already been seen, or false if the value is not stored.
     *
     * @throws InvalidArgumentException Thrown if $value is not an array or object
     */
    public function contains(&$value)
    {
        if (is_array($value)) {
            return $this->containsArray($value);
        } elseif (is_object($value)) {
            return $this->containsObject($value);
        }

        throw new InvalidArgumentException(
            'Only arrays and objects are supported'
        );
    }

    /**
     * @param array $array
     *
     * @return bool|int
     */
    private function addArray(array &$array)
    {
        $key = $this->containsArray($array);

        if ($key !== false) {
            return $key;
        }

        $key            = count($this->arrays);
        $this->arrays[] = &$array;

        if (!isset($array[PHP_INT_MAX]) && !isset($array[PHP_INT_MAX - 1])) {
            $array[] = $key;
            $array[] = $this->objects;
        } else { /* cover the improbable case too */
            do {
                $key = random_int(PHP_INT_MIN, PHP_INT_MAX);
            } while (isset($array[$key]));

            $array[$key] = $key;

            do {
                $key = random_int(PHP_INT_MIN, PHP_INT_MAX);
            } while (isset($array[$key]));

            $array[$key] = $this->objects;
        }

        return $key;
    }

    /**
     * @param object $object
     *
     * @return string
     */
    private function addObject($object)
    {
        if (!$this->objects->contains($object)) {
            $this->objects->attach($object);
        }

        return spl_object_hash($object);
    }

    /**
     * @param array $array
     *
     * @return int|false
     */
    private function containsArray(array &$array)
    {
        $end = array_slice($array, -2);

        return isset($end[1]) && $end[1] === $this->objects ? $end[0] : false;
    }

    /**
     * @param object $value
     *
     * @return string|false
     */
    private function containsObject($value)
    {
        if ($this->objects->contains($value)) {
            return spl_object_hash($value);
        }

        return false;
    }

    public function __destruct()
    {
        foreach ($this->arrays as &$array) {
            if (is_array($array)) {
                array_pop($array);
                array_pop($array);
            }
        }
    }
}
                                                                                                                                     <?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\EventDispatcher\Tests;

use PHPUnit\Framework\TestCase;
use Symfony\Component\EventDispatcher\Event;

/**
 * Test class for Event.
 */
class EventTest extends TestCase
{
    /**
     * @var \Symfony\Component\EventDispatcher\Event
     */
    protected $event;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->event = new Event();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->event = null;
    }

    public function testIsPropagationStopped()
    {
        $this->assertFalse($this->event->isPropagationStopped());
    }

    public function testStopPropagationAndIsPropagationStopped()
    {
        $this->event->stopPropagation();
        $this->assertTrue($this->event->isPropagationStopped());
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                <?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * This code is partially based on the Rack-Cache library by Ryan Tomayko,
 * which is released under the MIT license.
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Symfony\Component\HttpKernel\HttpCache;

use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

/**
 * Interface implemented by HTTP cache stores.
 *
 * @author Fabien Potencier <fabien@symfony.com>
 */
interface StoreInterface
{
    /**
     * Locates a cached Response for the Request provided.
     *
     * @param Request $request A Request instance
     *
     * @return Response|null A Response instance, or null if no cache entry was found
     */
    public function lookup(Request $request);

    /**
     * Writes a cache entry to the store for the given Request and Response.
     *
     * Existing entries are read and any that match the response are removed. This
     * method calls write with the new list of cache entries.
     *
     * @param Request  $request  A Request instance
     * @param Response $response A Response instance
     *
     * @return string The key under which the response is stored
     */
    public function write(Request $request, Response $response);

    /**
     * Invalidates all cache entries that match the request.
     *
     * @param Request $request A Request instance
     */
    public function invalidate(Request $request);

    /**
     * Locks the cache for a given Request.
     *
     * @param Request $request A Request instance
     *
     * @return bool|string true if the lock is acquired, the path to the current lock otherwise
     */
    public function lock(Request $request);

    /**
     * Releases the lock for the given Request.
     *
     * @param Request $request A Request instance
     *
     * @return bool False if the lock file does not exist or cannot be unlocked, true otherwise
     */
    public function unlock(Request $request);

    /**
     * Returns whether or not a lock exists.
     *
     * @param Request $request A Request instance
     *
     * @return bool true if lock exists, false otherwise
     */
    public function isLocked(Request $request);

    /**
     * Purges data for the given URL.
     *
     * @param string $url A URL
     *
     * @return bool true if the URL exists and has been purged, false otherwise
     */
    public function purge($url);

    /**
     * Cleanups storage.
     */
    public function cleanup();
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          <?php

// autoload_real.php @generated by Composer

class ComposerAutoloaderInit7b3bbcaac1ba5dd2c07c841cd2e67a1d
{
    private static $loader;

    public static function loadClassLoader($class)
    {
        if ('Composer\Autoload\ClassLoader' === $class) {
            require __DIR__ . '/ClassLoader.php';
        }
    }

    public static function getLoader()
    {
        if (null !== self::$loader) {
            return self::$loader;
        }

        spl_autoload_register(array('ComposerAutoloaderInit7b3bbcaac1ba5dd2c07c841cd2e67a1d', 'loadClassLoader'), true, true);
        self::$loader = $loader = new \Composer\Autoload\ClassLoader();
        spl_autoload_unregister(array('ComposerAutoloaderInit7b3bbcaac1ba5dd2c07c841cd2e67a1d', 'loadClassLoader'));

        $useStaticLoader = PHP_VERSION_ID >= 50600 && !defined('HHVM_VERSION') && (!function_exists('zend_loader_file_encoded') || !zend_loader_file_encoded());
        if ($useStaticLoader) {
            require_once __DIR__ . '/autoload_static.php';

            call_user_func(\Composer\Autoload\ComposerStaticInit7b3bbcaac1ba5dd2c07c841cd2e67a1d::getInitializer($loader));
        } else {
            $map = require __DIR__ . '/autoload_namespaces.php';
            foreach ($map as $namespace => $path) {
                $loader->set($namespace, $path);
            }

            $map = require __DIR__ . '/autoload_psr4.php';
            foreach ($map as $namespace => $path) {
                $loader->setPsr4($namespace, $path);
            }

            $classMap = require __DIR__ . '/autoload_classmap.php';
            if ($classMap) {
                $loader->addClassMap($classMap);
            }
        }

        $loader->register(true);

        return $loader;
    }
}
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              <?php

/*
 * This file is part of the Symfony p